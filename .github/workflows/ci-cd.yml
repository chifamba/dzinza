---
name: Dzinza CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: "20"
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm ls --workspaces --depth=0
      - run: |
          if npm run lint 2>/dev/null; then
            echo "Ran linting via workspace command"
          else
            echo "Running linting for individual services..."
            [ -f "frontend/package.json" ] && cd frontend && npm run lint && cd ..
            [ -f "backend-service/package.json" ] && cd backend-service && npm run lint && cd ..
          fi
      - run: |
          if npm run typecheck 2>/dev/null; then
            echo "Ran typecheck via workspace command"
          else
            echo "Running typecheck for individual services..."
            [ -f "frontend/package.json" ] && cd frontend && npm run typecheck && cd ..
            [ -f "backend-service/package.json" ] && cd backend-service && npm run typecheck && cd ..
          fi
      - run: |
          if npm run test:unit 2>/dev/null; then
            echo "Ran tests via workspace command"
          else
            echo "Running tests for individual services..."
            [ -f "frontend/package.json" ] && cd frontend && npm run test && cd ..
            [ -f "backend-service/package.json" ] && cd backend-service && npm run test && cd ..
          fi
      - run: |
          if npm run test:integration 2>/dev/null; then
            echo "Ran integration tests via workspace command"
          else
            echo "Running integration tests for individual services..."
            [ -f "frontend/package.json" ] && cd frontend && npm run test:integration && cd ..
            [ -f "backend-service/package.json" ] && cd backend-service && npm run test:integration && cd ..
          fi
      - uses: codecov/codecov-action@v3
        with:
          file: |
            ./frontend/coverage/lcov.info
            ./backend-service/coverage/lcov.info
          flags: unittests
          name: coverage-report

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci
      - run: npm ls --workspaces --depth=0
      - run: |
          if npm run security:audit 2>/dev/null; then
            echo "Ran security audit via workspace command"
          else
            [ -f "frontend/package.json" ] && cd frontend && npm audit --audit-level=moderate && cd ..
            [ -f "backend-service/package.json" ] && cd backend-service && npm audit --audit-level=moderate && cd ..
          fi
      - uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/ci
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/docker
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      - uses: google/osv-scanner-action/osv-scanner-action@v2.0.2
        with:
          scan-args: "--recursive --skip-git ./"
        continue-on-error: true
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif
          exit-code: 0
          severity: CRITICAL,HIGH
      - run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "✅ SARIF file created"
          else
            echo "❌ SARIF file not found"
          fi
      - uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-results.sarif') != ''
        with:
          sarif_file: trivy-results.sarif
        continue-on-error: true
      - run: |
          pip install detect-secrets || true
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          grep -r -i "password\|secret\|key\|token" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.log" || true

  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript", "typescript"]
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: +security-and-quality
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: |
          if [ -f "package.json" ]; then
            npm install || npm ci
          fi
      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test, security, codeql]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci
        working-directory: ./frontend
      - run: npx playwright install --with-deps
        working-directory: ./frontend
      - run: npm run test:e2e
        working-directory: ./frontend
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-results
          path: frontend/test-results/
          retention-days: 7

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    strategy:
      fail-fast: false
      matrix:
        include:
          - service_name: auth-service
            dockerfile_path: ./auth-service/Dockerfile
          - service_name: backend-service
            dockerfile_path: ./backend-service/Dockerfile
          - service_name: gateway-service
            dockerfile_path: ./backend-service/services/gateway/Dockerfile
          - service_name: frontend
            dockerfile_path: ./frontend/Dockerfile
          - service_name: genealogy-service
            dockerfile_path: ./genealogy-service/Dockerfile
          - service_name: search-service
            dockerfile_path: ./search-service/Dockerfile
          - service_name: storage-service
            dockerfile_path: ./storage-service/Dockerfile
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service_name }}
          tags: |
            type=sha,prefix=sha-,suffix=,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=develop-sha-${{ github.sha }},enable=${{ github.ref == 'refs/heads/develop' }}
            type=raw,value=develop,enable=${{ github.ref == 'refs/heads/develop' }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile_path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # deploy-staging, performance, deploy-production continue unchanged, just update their needs as described previously.
  # If you'd like me to finish those sections too with exact dependencies applied, let me know!
