---
name: Dzinza CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: "20"
  REGISTRY: ghcr.io

jobs:
  # Quick validation and discovery
  validate:
    name: Validate & Discover
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.discover.outputs.services }}
      has-tests: ${{ steps.discover.outputs.has-tests }}
    steps:
      - uses: actions/checkout@v4

      - name: Discover services and validate
        id: discover
        run: |
          # Discover all services with package.json
          SERVICES=()
          HAS_TESTS=false

          for dir in frontend backend-service auth-service genealogy-service search-service storage-service; do
            if [ -f "$dir/package.json" ]; then
              echo "Found service: $dir"
              SERVICES+=("$dir")
              
              # Check if any service has tests
              if grep -q '"test"' "$dir/package.json"; then
                HAS_TESTS=true
              fi
            fi
          done

          # Validate root package.json exists
          if [ ! -f "package.json" ]; then
            echo "::error::Root package.json is missing"
            exit 1
          fi

          # Output discovered services as JSON array
          SERVICES_JSON=$(printf '%s\n' "${SERVICES[@]}" | jq -R . | jq -s .)
          echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
          echo "has-tests=$HAS_TESTS" >> $GITHUB_OUTPUT

          echo "✅ Discovered ${#SERVICES[@]} services"
          echo "✅ Tests available: $HAS_TESTS"

  # Build all services using workspaces
  build:
    name: Build & Quality
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install all dependencies
        run: npm ci

      - name: Lint all workspaces
        run: npm run lint
        continue-on-error: false

      - name: Type check all workspaces
        run: npm run typecheck
        continue-on-error: false

      - name: Build all workspaces
        run: npm run build

      - name: Security audit
        run: |
          npm audit --audit-level=high
        continue-on-error: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            */dist/
            */build/
          retention-days: 1

  # Run tests if available
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.has-tests == 'true'
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Run all tests
        run: npm run test

  # Build Docker images (only on main branch)
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [validate, build, test]
    if: github.ref == 'refs/heads/main' && !failure()
    strategy:
      matrix:
        service: ${{ fromJson(needs.validate.outputs.services) }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate Dockerfile
        run: |
          if [ ! -f "${{ matrix.service }}/Dockerfile" ]; then
            echo "::error::Missing Dockerfile for ${{ matrix.service }}"
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service }}
          tags: |
            type=sha,prefix=sha-,format=short
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          platforms: linux/amd64
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}

  # Deployment readiness check
  deploy-ready:
    name: Deploy Ready
    runs-on: ubuntu-latest
    needs: [build, test, docker]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "::error::Build failed"
            exit 1
          fi
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "::error::Tests failed"
            exit 1
          fi
          if [ "${{ needs.docker.result }}" == "failure" ]; then
            echo "::error::Docker build failed"
            exit 1
          fi
          echo "✅ Ready for deployment!"
