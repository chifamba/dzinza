# Enhanced Development Environment Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.development.yml up

version: "3.8"

services:
  # Frontend Development with Hot Reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        - NODE_ENV=development
    ports:
      - "3000:3000" # Vite dev server
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:3000
      - VITE_API_TIMEOUT=30000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Enhanced PostgreSQL for Development
  postgres:
    environment:
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=0
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/scripts:/docker-entrypoint-initdb.d/scripts

  # Enhanced MongoDB for Development
  mongodb:
    environment:
      - MONGO_INITDB_ROOT_USERNAME=dzinza_user
      - MONGO_INITDB_ROOT_PASSWORD=mongo_secure_password_456
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
      - ./database/mongo-scripts:/docker-entrypoint-initdb.d/scripts

  # Enhanced Redis for Development
  redis:
    command:
      [
        "redis-server",
        "--requirepass",
        "redis_secure_password_789",
        "--appendonly",
        "yes",
        "--save",
        "60",
        "1000",
      ]

  # Enhanced Elasticsearch for Development
  elasticsearch:
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "bootstrap.memory_lock=true"
      - "cluster.name=dzinza-elasticsearch-dev"
      - "http.cors.enabled=true"
      - 'http.cors.allow-origin="*"'
      - "action.destructive_requires_name=false"
      - "logger.level=INFO"
      # Set default index settings for single-node development
      - "index.number_of_replicas=0"
      - "index.number_of_shards=1"

  # Development Services with Volume Mounts
  auth_service:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./auth-service:/home/app/web

  backend_service:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./backend-service:/home/app/web

  genealogy_service:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./genealogy-service:/home/app/web

  genealogy_service_worker:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./genealogy-service:/home/app/web

  search_service:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./search-service:/home/app/web

  storage_service:
    environment:
      - DEBUG=true
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=DEBUG
    volumes:
      - ./storage-service:/home/app/web

  # Enhanced Monitoring for Development
  prometheus:
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus

  grafana:
    ports:
      - "3300:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  # Development Tools
  adminer:
    image: adminer:4.8.1
    container_name: dzinza-adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - dzinza-network
    depends_on:
      - postgres
      - mongodb

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dzinza-redis-commander
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_secure_password_789
    networks:
      - dzinza-network
    depends_on:
      - redis

  # Elasticsearch Head for ES Management
  elasticsearch-head:
    image: mobz/elasticsearch-head:5
    container_name: dzinza-elasticsearch-head
    ports:
      - "9100:9100"
    networks:
      - dzinza-network
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  shared_config:
  garage1_data:
  garage1_meta:
  garage2_data:
  garage2_meta:
  garage3_data:
  garage3_meta:

networks:
  dzinza-network:
    driver: bridge
