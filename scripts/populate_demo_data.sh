#!/bin/bash

# Script to populate demo genealogical data using curl and jq
# Ensure jq is installed: sudo apt-get install jq (or equivalent for your OS)

set -e # Exit immediately if a command exits with a non-zero status.
# set -x # Print commands and their arguments as they are executed (for debugging).

API_BASE_URL="http://localhost:3001/api"
DEFAULT_OWNER_ID_AFRICAN="auth0|user_adebayo_demo"
DEFAULT_OWNER_ID_EUROPEAN="auth0|user_dubois_demo"

# Function to check if jq is installed
check_jq() {
  if ! command -v jq &> /dev/null
  then
    echo "jq could not be found. Please install jq to run this script."
    echo "For example, on Debian/Ubuntu: sudo apt-get install jq"
    exit 1
  fi
  echo "jq found."
}

# Function to create a family tree if it doesn't exist
# Usage: create_tree "Tree Name" "Owner ID"
create_tree() {
  local tree_name="$1"
  local owner_id="$2"
  local tree_id

  echo "Attempting to find or create tree: $tree_name..."

  # Try to find the tree by name (simple grep, assumes name is unique enough for demo)
  # Note: A more robust way would be a GET /trees?name=... if API supports it
  # For now, we assume we create or it's fine if it pre-exists from a previous run for this demo.
  # This script doesn't have a sophisticated way to get tree ID if it exists without a direct name query.
  # So, we'll try to create. If it fails due to already existing (e.g. unique name constraint),
  # this script would need adjustment or a way to query tree ID by name via API.
  # The current API spec doesn't show GET /trees by name.

  # Let's assume we'll always try to create, and if it's already there by a previous run of THIS script,
  # we'd ideally get its ID. For this script, we'll just create and get a new ID or let it fail if not designed for duplicates.
  # The provided swagger shows POST /trees but not how to query its ID by name if it exists.
  # The plan mentions "If a tree doesn't exist, it should create it". And "If the trees already exist by name, it will use them".
  # This implies we need to GET the tree ID first.
  # Let's simulate a GET by name and if not found, create.
  # Since there's no GET /trees?name=... endpoint, we'll simplify:
  # The script will attempt to create trees. If you run it multiple times, it might create multiple trees with the same name
  # if the API allows it, or fail if there's a unique constraint on the name for an owner.
  # For this demo, we'll assume it's okay to create or that the user cleans up.
  # The prompt was "If a tree doesn't exist, it should create it." - this is covered.
  # "if there are already some people, it can extend some of the family trees." - this is harder without robust GETs.

  # Simplified: Create tree and get its ID.
  # If the API had a GET /trees?name=<name>&ownerId=<ownerId>, we'd use that first.
  # As it doesn't, we proceed to create.
  
  # Check for existing tree (simulated - actual script will try to grep from a list if available, or just create)
  # For the purpose of this script, we'll try to create it. If it fails due to unique constraints,
  # the user would be notified by curl output. A real script might query first.
  # The current API for POST /trees in swagger doesn't specify request body. Assuming name and ownerId.

  local existing_tree_id
  # This is a placeholder for how one might get an existing tree ID if the API supported it well for scripts
  # existing_tree_id=$(curl -s -X GET "$API_BASE_URL/trees?name=$tree_name&ownerId=$owner_id" | jq -r '.[0]._id // empty')

  # if [ -n "$existing_tree_id" ]; then
  #   echo "Found existing tree '$tree_name' with ID: $existing_tree_id"
  #   TREE_ID="$existing_tree_id"
  # else
  echo "Creating tree '$tree_name'..."
  payload=$(jq -n --arg name "$tree_name" --arg ownerId "$owner_id"             '{name: $name, ownerId: $ownerId, privacy: "public", description: "Demo tree generated by script"}')

  response=$(curl -s -X POST "$API_BASE_URL/trees"     -H "Content-Type: application/json"     -d "$payload")

  tree_id=$(echo "$response" | jq -r '._id')

  if [ -z "$tree_id" ] || [ "$tree_id" == "null" ]; then
    echo "Error creating tree '$tree_name'. Response:"
    echo "$response"
    exit 1
  fi
  echo "Tree '$tree_name' created with ID: $tree_id"
  # fi
  echo "$tree_id" # Return the tree_id
}

# Function to create a person
# Usage: create_person <family_tree_id> <first_name> <last_name> <gender> <dob> [dod] [clan] [tribe] [place_of_birth]
create_person() {
  local family_tree_id="$1"
  local first_name="$2"
  local last_name="$3"
  local gender="$4"
  local dob="$5"
  local dod="${6:-null}" # Default to null if not provided
  local clan="${7:-null}"
  local tribe="${8:-null}"
  local pob="${9:-}"
  local person_id

  echo "Creating person: $first_name $last_name in tree $family_tree_id..."

  payload_args="--arg treeId "$family_tree_id""
  payload_args="$payload_args --arg firstName "$first_name""
  payload_args="$payload_args --arg lastName "$last_name""
  payload_args="$payload_args --arg gender "$gender""
  payload_args="$payload_args --arg dob "$dob""
  [ "$pob" != "" ] && payload_args="$payload_args --arg pob "$pob""
  
  # Base JSON structure
  json_structure='{
    familyTreeId: $treeId, 
    firstName: $firstName, 
    lastName: $lastName, 
    gender: $gender, 
    dateOfBirth: $dob,
    isLiving: true 
  }'
  
  # Add optional fields if provided
  temp_json="$json_structure"
  if [ "$dod" != "null" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {dateOfDeath: $dodVal, isLiving: false}' --arg dodVal "$dod")
  fi
  if [ "$clan" != "null" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {clan: $clanVal}' --arg clanVal "$clan")
  fi
  if [ "$tribe" != "null" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {tribe: $tribeVal}' --arg tribeVal "$tribe")
  fi
   if [ "$pob" != "" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {placeOfBirth: $pob}' --arg pob "$pob")
  fi

  payload=$(jq -n "$payload_args" "$temp_json")
  
  # Debug: echo "Payload for $first_name $last_name: $payload"

  response=$(curl -s -X POST "$API_BASE_URL/people"     -H "Content-Type: application/json"     -d "$payload")

  person_id=$(echo "$response" | jq -r '._id')

  if [ -z "$person_id" ] || [ "$person_id" == "null" ]; then
    echo "Error creating person '$first_name $last_name'. Response:"
    echo "$response"
    # exit 1 # Commenting out exit to allow script to continue if one person fails for some reason
    echo "Continuing with next person..."
    echo "" # Return empty string on failure
  else
    echo "Created $first_name $last_name with ID: $person_id"
    echo "$person_id" # Return the person_id
  fi
}

# Function to create a relationship
# Usage: create_relationship <family_tree_id> <person1_id> <person2_id> <type> [status/parentalRole] [start_date] [end_date]
create_relationship() {
  local family_tree_id="$1"
  local person1_id="$2"
  local person2_id="$3"
  local type="$4" # ParentChild, Spousal
  local role_or_status="${5:-}" # e.g., BiologicalFather, Married, Divorced
  local start_date="${6:-null}"
  local end_date="${7:-null}"
  local relationship_id

  if [ -z "$person1_id" ] || [ "$person1_id" == "null" ] || [ -z "$person2_id" ] || [ "$person2_id" == "null" ]; then
    echo "Skipping relationship due to missing person ID(s) ($type between $person1_id and $person2_id)"
    return
  fi

  echo "Creating relationship: $person1_id ($type) $person2_id in tree $family_tree_id..."

  payload_args="--arg treeId "$family_tree_id""
  payload_args="$payload_args --arg p1Id "$person1_id""
  payload_args="$payload_args --arg p2Id "$person2_id""
  payload_args="$payload_args --arg type "$type""

  json_structure='{
    familyTreeId: $treeId, 
    person1Id: $p1Id, 
    person2Id: $p2Id, 
    type: $type
  }'
  
  temp_json="$json_structure"

  if [ "$type" == "ParentChild" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {parentalRole: $role}' --arg role "$role_or_status")
  elif [ "$type" == "Spousal" ]; then
    temp_json=$(echo "$temp_json" | jq '. + {status: $status}' --arg status "$role_or_status")
    if [ "$start_date" != "null" ]; then
      temp_json=$(echo "$temp_json" | jq '. + {startDate: $sDate}' --arg sDate "$start_date")
    fi
    if [ "$end_date" != "null" ]; then
      temp_json=$(echo "$temp_json" | jq '. + {endDate: $eDate}' --arg eDate "$end_date")
    fi
  fi
  
  payload=$(jq -n "$payload_args" "$temp_json")
  # Debug: echo "Payload for relationship: $payload"

  response=$(curl -s -X POST "$API_BASE_URL/relationships"     -H "Content-Type: application/json"     -d "$payload")

  relationship_id=$(echo "$response" | jq -r '._id')

  if [ -z "$relationship_id" ] || [ "$relationship_id" == "null" ]; then
    echo "Error creating relationship ($type between $person1_id and $person2_id). Response:"
    echo "$response"
    # exit 1 # Commenting out exit to allow script to continue
    echo "Continuing..."
  else
    echo "Relationship created with ID: $relationship_id"
  fi
}

# --- Main Script ---
check_jq

echo "Starting demo data population..."

# --- Adebayo Family (African Reality - Nigeria) ---
echo -e "
--- Processing Adebayo Family ---"
ADEBAYO_TREE_ID=$(create_tree "Adebayo Family Demo" "$DEFAULT_OWNER_ID_AFRICAN")

if [ -z "$ADEBAYO_TREE_ID" ]; then
  echo "Failed to create or retrieve Adebayo Family Tree ID. Exiting."
  exit 1
fi

# Generation 1
P_ADEWALE_A=$(create_person "$ADEBAYO_TREE_ID" "Adewale" "Adebayo" "Male" "1940-05-10" "2010-12-15" "Owu" "Yoruba" "Ibadan, Nigeria")
P_AISHA_B=$(create_person "$ADEBAYO_TREE_ID" "Aisha" "Bello" "Female" "1945-02-20" "1973-01-25" "Fulani" "Fulani" "Kano, Nigeria")
P_FUNMILAYO_O=$(create_person "$ADEBAYO_TREE_ID" "Funmilayo" "Okoro" "Female" "1955-11-05" "null" "Igbo" "Igbo" "Enugu, Nigeria")

create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_AISHA_B" "Spousal" "Married" "1960-03-15" "1973-01-25" # Aisha died
create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_FUNMILAYO_O" "Spousal" "Married" "1975-08-20"

# Generation 2 (Children of Adewale)
P_BOLANLE_A=$(create_person "$ADEBAYO_TREE_ID" "Bolanle" "Adebayo" "Female" "1962-07-19" "null" "Owu" "Yoruba" "Ibadan, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_BOLANLE_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_AISHA_B" "$P_BOLANLE_A" "ParentChild" "BiologicalMother"

P_CHINEDU_A=$(create_person "$ADEBAYO_TREE_ID" "Chinedu" "Adebayo" "Male" "1965-09-03" "null" "Owu" "Yoruba" "Ibadan, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_CHINEDU_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_AISHA_B" "$P_CHINEDU_A" "ParentChild" "BiologicalMother"

P_NGOZI_A=$(create_person "$ADEBAYO_TREE_ID" "Ngozi" "Adebayo" "Female" "1978-03-25" "null" "Owu" "Igbo" "Lagos, Nigeria") # Clan from father, tribe from mother's side too
create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_NGOZI_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_FUNMILAYO_O" "$P_NGOZI_A" "ParentChild" "BiologicalMother"

P_OLUMIDE_A=$(create_person "$ADEBAYO_TREE_ID" "Olumide" "Adebayo" "Male" "1982-11-10" "null" "Owu" "Yoruba" "Lagos, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_ADEWALE_A" "$P_OLUMIDE_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_FUNMILAYO_O" "$P_OLUMIDE_A" "ParentChild" "BiologicalMother"

# Spouses for Generation 2
P_TAYE_ADK=$(create_person "$ADEBAYO_TREE_ID" "Taye" "Adekunle" "Male" "1958-01-10" "null" "Unknown" "Yoruba" "Abeokuta, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_BOLANLE_A" "$P_TAYE_ADK" "Spousal" "Married" "1985-04-12"

P_IFEOMA_E=$(create_person "$ADEBAYO_TREE_ID" "Ifeoma" "Eze" "Female" "1968-06-20" "null" "Unknown" "Igbo" "Onitsha, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_CHINEDU_A" "$P_IFEOMA_E" "Spousal" "Divorced" "1990-11-22" "2005-06-10"

P_ZAINAB_ALI=$(create_person "$ADEBAYO_TREE_ID" "Zainab" "Aliyu" "Female" "1975-12-05" "null" "Unknown" "Hausa" "Kaduna, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_CHINEDU_A" "$P_ZAINAB_ALI" "Spousal" "Married" "2008-01-15"

P_EMEKA_OKA=$(create_person "$ADEBAYO_TREE_ID" "Emeka" "Okafor" "Male" "1975-02-18" "null" "Unknown" "Igbo" "Aba, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_NGOZI_A" "$P_EMEKA_OKA" "Spousal" "Married" "2000-09-08"

# Generation 3 (Grandchildren)
P_FATIMA_ADK=$(create_person "$ADEBAYO_TREE_ID" "Fatima" "Adekunle" "Female" "1988-12-01" "null" "Owu" "Yoruba" "Lagos, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_TAYE_ADK" "$P_FATIMA_ADK" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_BOLANLE_A" "$P_FATIMA_ADK" "ParentChild" "BiologicalMother"

P_KWAME_A=$(create_person "$ADEBAYO_TREE_ID" "Kwame" "Adebayo" "Male" "1992-05-14" "null" "Owu" "Yoruba" "Abuja, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_CHINEDU_A" "$P_KWAME_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_IFEOMA_E" "$P_KWAME_A" "ParentChild" "BiologicalMother" # Child from first marriage

P_AMINA_A=$(create_person "$ADEBAYO_TREE_ID" "Amina" "Adebayo" "Female" "2010-03-03" "null" "Owu" "Yoruba" "Abuja, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_CHINEDU_A" "$P_AMINA_A" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_ZAINAB_ALI" "$P_AMINA_A" "ParentChild" "BiologicalMother" # Child from second marriage

P_CHINAZA_O=$(create_person "$ADEBAYO_TREE_ID" "Chinaza" "Okafor" "Female" "2005-07-22" "null" "Unknown" "Igbo" "Enugu, Nigeria")
create_relationship "$ADEBAYO_TREE_ID" "$P_EMEKA_OKA" "$P_CHINAZA_O" "ParentChild" "BiologicalFather"
create_relationship "$ADEBAYO_TREE_ID" "$P_NGOZI_A" "$P_CHINAZA_O" "ParentChild" "BiologicalMother"


# --- Dubois / Schmidt Family (European Reality - France/Germany) ---
echo -e "
--- Processing Dubois-Schmidt Family ---"
DUBOIS_SCHMIDT_TREE_ID=$(create_tree "Dubois-Schmidt Family Demo" "$DEFAULT_OWNER_ID_EUROPEAN")

if [ -z "$DUBOIS_SCHMIDT_TREE_ID" ]; then
  echo "Failed to create or retrieve Dubois-Schmidt Family Tree ID. Exiting."
  exit 1
fi

# Generation 1
P_JEANLUC_D=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Jean-Luc" "Dubois" "Male" "1942-03-15" "2015-07-20" "null" "null" "Lyon, France")
P_ANNELISE_S=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Annelise" "Schmidt" "Female" "1945-09-25" "null" "null" "null" "Berlin, Germany")
P_BRIGITTE_M=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Brigitte" "Moreau" "Female" "1955-01-30" "null" "null" "null" "Lille, France")

create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_JEANLUC_D" "$P_ANNELISE_S" "Spousal" "Divorced" "1965-06-10" "1985-11-22"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_JEANLUC_D" "$P_BRIGITTE_M" "Spousal" "Married" "1990-02-14" "2015-07-20" # Jean-Luc died

# Generation 2
P_SOPHIE_D=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Sophie" "Dubois" "Female" "1968-04-10" "null" "null" "null" "Lyon, France")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_JEANLUC_D" "$P_SOPHIE_D" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_ANNELISE_S" "$P_SOPHIE_D" "ParentChild" "BiologicalMother"

P_MARKUS_DS=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Markus" "Schmidt" "Male" "1972-11-05" "null" "null" "null" "Munich, Germany") # Took mother's name
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_JEANLUC_D" "$P_MARKUS_DS" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_ANNELISE_S" "$P_MARKUS_DS" "ParentChild" "BiologicalMother"

P_PIERRE_D=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Pierre" "Dubois" "Male" "1992-07-20" "null" "null" "null" "Paris, France")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_JEANLUC_D" "$P_PIERRE_D" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_BRIGITTE_M" "$P_PIERRE_D" "ParentChild" "BiologicalMother"

# Spouses for Generation 2
P_KLAUS_W=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Klaus" "Weber" "Male" "1965-07-15" "null" "null" "null" "Hamburg, Germany")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_SOPHIE_D" "$P_KLAUS_W" "Spousal" "Married" "1992-08-18"

P_LENA_B=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Lena" "Bauer" "Female" "1975-02-20" "null" "null" "null" "Stuttgart, Germany")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_MARKUS_DS" "$P_LENA_B" "Spousal" "Divorced" "2000-05-20" "2010-09-15"

P_AMELIE_DUR=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Amélie" "Durand" "Female" "1994-05-05" "null" "null" "null" "Lyon, France")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_PIERRE_D" "$P_AMELIE_DUR" "Spousal" "Married" "2020-10-10"

# Generation 3
P_LUKAS_W=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Lukas" "Weber" "Male" "1995-03-12" "null" "null" "null" "Berlin, Germany")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_KLAUS_W" "$P_LUKAS_W" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_SOPHIE_D" "$P_LUKAS_W" "ParentChild" "BiologicalMother"

P_MARIE_W=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Marie" "Weber" "Female" "1998-09-01" "null" "null" "null" "Berlin, Germany")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_KLAUS_W" "$P_MARIE_W" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_SOPHIE_D" "$P_MARIE_W" "ParentChild" "BiologicalMother"

P_FINN_S=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Finn" "Schmidt" "Male" "2003-06-28" "null" "null" "null" "Hamburg, Germany")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_MARKUS_DS" "$P_FINN_S" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_LENA_B" "$P_FINN_S" "ParentChild" "BiologicalMother"

P_CHLOE_D=$(create_person "$DUBOIS_SCHMIDT_TREE_ID" "Chloé" "Dubois" "Female" "2022-02-10" "null" "null" "null" "Paris, France")
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_PIERRE_D" "$P_CHLOE_D" "ParentChild" "BiologicalFather"
create_relationship "$DUBOIS_SCHMIDT_TREE_ID" "$P_AMELIE_DUR" "$P_CHLOE_D" "ParentChild" "BiologicalMother"

echo -e "
Demo data population script finished."
echo "Please check the API responses above for any errors."
echo "You might need to run this script multiple times if there are transient network issues, or if IDs are not generated/captured correctly on the first pass for all entries."
