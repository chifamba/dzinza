[tool.poetry]
name = "auth-service"
version = "0.1.0"
description = "Authentication Service for Dzinza Platform"
authors = ["Dzinza AI Migration Team <ai@dzinza.com>"] # Placeholder author
readme = "README.md" # Assuming a README might be added later
packages = [{include = "app", from = "."}]

[tool.poetry.dependencies]
python = "^3.11"
# Core dependencies will be populated from requirements.txt by poetry add
# For now, this just sets up the project structure for poetry.
# If not using poetry for dep management, this section would be different or not needed
# if requirements.txt is the sole source of truth for deps.
# However, pyproject.toml is standard for ruff config even without poetry.

[tool.poetry.group.dev.dependencies]
ruff = "^0.3.0" # Or latest version
pytest = ">=7.0.0" # If using pytest

# Ruff configuration
# https://beta.ruff.rs/docs/configuration/
[tool.ruff]
# Same as Black.
line-length = 99 # Slightly more relaxed than default 88
indent-width = 4

# Enforce a specific Python version.
target-version = "py311" # Matches our project's Python 3.11

[tool.ruff.lint]
# Enable Pyflakes and pycodestyle error categories by default.
# E501: line too long (handled by formatter or line-length if formatter not used)
# W292: no newline at end of file
select = ["E", "F", "W"] # Pyflakes, pycodestyle errors, pycodestyle warnings
ignore = ["E501"] # Often handled by formatter like Black or ruff format

# Allow unused variables in `__init__.py` files frequently used for imports.
# per-file-ignores = { "__init__.py" = ["F401"] } # Example

# You can add more specific rules or plugins:
# select = [
#     "E",  # pycodestyle errors
#     "W",  # pycodestyle warnings
#     "F",  # Pyflakes
#     "I",  # isort
#     "C4", # flake8-comprehensions
#     "B",  # flake8-bugbear
# ]
# ignore = ["E501"] # Example: ignore line too long, often handled by formatter

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*", # Django/Alembic migrations often have generated code
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# If using Black as the primary formatter and Ruff for linting, you might want Ruff to be compatible:
# [tool.ruff]
# line-length = 88
# target-version = "py311"
# [tool.ruff.lint]
# select = ["E", "F"] # Common baseline
# ignore = []
# # Add other plugins as needed, e.g. "I" for isort if not using ruff's import sorter

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
