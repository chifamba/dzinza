# ==============================================================================
# IMPORTANT: Security and Configuration Template for Auth Service
# ==============================================================================
# This file (`.env.example`) serves as a TEMPLATE for the actual `.env`
# configuration file used by the Authentication Service.
#
# **DO NOT use this file directly in production or development.**
#
# 1. **COPY THIS FILE:** Create a new file named `.env` in the `auth-service`
#    directory.
# 2. **REPLACE ALL PLACEHOLDERS:** You **MUST** replace all placeholder values,
#    especially for secrets (passwords, API keys, JWT secrets), with strong,
#    unique, and random values suitable for your environment.
# 3. **NEVER COMMIT `.env` FILES:** Ensure your actual `auth-service/.env` file
#    containing sensitive credentials is listed in your root `.gitignore` file.
#
# Failure to follow these instructions can lead to severe security vulnerabilities.
# ==============================================================================

# Backend Authentication Service - Environment Variables Example

# Application Configuration
NODE_ENV=development # Should be 'production' in actual production .env
PORT=3002
SERVICE_NAME=auth-service

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/dzinza_auth # Example: mongodb://user:PASS@host:port/dbname?authSource=admin
DB_NAME=dzinza_auth

# Redis Configuration (Optional, for session management or caching)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_TO_YOUR_STRONG_REDIS_PASSWORD_IF_USED
REDIS_DB=0

# JWT Configuration
JWT_SECRET=AUTH_JWT_SECRET_MUST_BE_CHANGED_TO_A_STRONG_RANDOM_VALUE
JWT_EXPIRES_IN=1h # Example: 15m for access tokens
REFRESH_TOKEN_SECRET=AUTH_REFRESH_TOKEN_SECRET_MUST_BE_CHANGED_TO_A_DIFFERENT_STRONG_RANDOM_VALUE
REFRESH_TOKEN_EXPIRES_IN=7d # Example: 7d or 30d for refresh tokens

# Security Configuration
BCRYPT_ROUNDS=12 # Adjust as needed
CORS_ORIGIN=http://localhost:3000 # Adjust for your frontend URL
RATE_LIMIT_WINDOW_MS=900000 # 15 minutes
RATE_LIMIT_MAX_REQUESTS=100
AUTH_RATE_LIMIT_MAX=10 # Max auth attempts (login, register, password reset) per window

# Email Configuration
# For development, you can use services like Ethereal (https://ethereal.email/)
# or Mailtrap (https://mailtrap.io/). For production, use a transactional email service.
SMTP_HOST=your_smtp_server_host # e.g., smtp.example.com
SMTP_PORT=587 # Or 465 for SSL
SMTP_SECURE=false # true for SSL/TLS with port 465, false for STARTTLS with port 587
SMTP_USER=your_smtp_username_or_email
SMTP_PASS=CHANGE_THIS_TO_YOUR_SMTP_PASSWORD_OR_APP_PASSWORD
FROM_EMAIL="No Reply <noreply@yourdomain.com>" # Example format
FROM_NAME="Dzinza Platform" # Name appearing in email 'From' field

# Frontend URL (Used for generating links in emails, etc.)
FRONTEND_URL=http://localhost:3000 # Change to your actual frontend URL in production

# MFA Configuration (If applicable)
MFA_ISSUER="DzinzaPlatform" # Name of your application shown in authenticator apps
MFA_WINDOW=1 # Number of valid previous/next OTPs to check

# Logging Configuration
LOG_LEVEL=info # (debug, info, warn, error)
LOG_FORMAT=combined # (dev, combined, json) - 'json' is good for production log aggregation

# OpenTelemetry Tracing Configuration (Jaeger)
ENABLE_TRACING=true # Set to 'true' to enable OpenTelemetry tracing
OTEL_SERVICE_NAME=auth-service # OpenTelemetry service name for this instance
JAEGER_ENDPOINT=http://localhost:4318/v1/traces # Jaeger OTLP HTTP endpoint

# Session Configuration (If using sessions, e.g. for social auth state)
SESSION_SECRET=AUTH_SESSION_SECRET_MUST_BE_CHANGED_TO_A_STRONG_RANDOM_VALUE
SESSION_EXPIRES_IN=86400000 # 1 day in milliseconds

# Account Security Settings
MAX_LOGIN_ATTEMPTS=5
ACCOUNT_LOCKOUT_TIME=900000 # 15 minutes in milliseconds
PASSWORD_RESET_EXPIRES=3600000 # 1 hour in milliseconds
EMAIL_VERIFICATION_EXPIRES=86400000 # 24 hours in milliseconds

# Development Specific Flags
ENABLE_SWAGGER=true # Set to false in production if not needed
SKIP_EMAIL_VERIFICATION=false # For development, to bypass email verification flow. MUST be false in production.
ENABLE_DEBUG=false # Enable more verbose debugging, use with caution in production. MUST be false in production.

# Google OAuth2 Configuration
GOOGLE_CLIENT_ID=CHANGE_THIS_TO_YOUR_GOOGLE_OAUTH_CLIENT_ID
GOOGLE_CLIENT_SECRET=CHANGE_THIS_TO_YOUR_GOOGLE_OAUTH_CLIENT_SECRET
# Ensure this callback URL is registered in your Google Cloud Console project for the client ID.
# The path should match the one defined in `src/routes/socialAuth.ts`.
# Example: http://localhost:PORT/social/google/callback (replace PORT with actual)
GOOGLE_CALLBACK_URL=http://localhost:3002/api/auth/social/google/callback # Update with correct path if different
