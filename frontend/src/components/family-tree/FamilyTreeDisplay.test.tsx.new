import React from 'react';
import { render, screen, waitFor, fireEvent, within } from '@testing-library/react';
import FamilyTreeDisplay from './FamilyTreeDisplay';
import { FamilyTree } from '../../types/genealogy';
import { describe, it, expect, beforeEach, vi } from 'vitest';

// Mock the genealogy service
vi.mock("../../services/api/genealogyService", () => ({
  genealogyService: {
    getFamilyTree: vi.fn(),
    addPersonToTree: vi.fn(),
    updatePersonInTree: vi.fn(),
    deletePersonFromTree: vi.fn(),
    addRelationship: vi.fn(),
    deleteRelationship: vi.fn(),
  },
}));

// Import after mocking
import { genealogyService } from '../../services/api/genealogyService';

// Mock react-d3-tree to avoid SVG rendering issues in tests
vi.mock("react-d3-tree", () => ({
  default: ({
    data,
    renderCustomNodeElement,
    orientation,
    pathFunc,
    zoom,
    translate,
    onNodeClick,
    separation,
  }: any) => (
    <div data-testid="mock-tree">
      {/* Render a mock of first level nodes to test interaction */}
      <div data-testid="tree-container">
        {Array.isArray(data) &&
          data.map((node: any, index: number) => (
            <div key={index} data-testid={`tree-node-${node.name || index}`}>
              {renderCustomNodeElement
                ? renderCustomNodeElement({
                    nodeDatum: node,
                    toggleNode: () => {},
                    hierarchyPointNode: {} as any,
                  })
                : node.name}
              {/* If we need to test node children, we could recursively render them here */}
            </div>
          ))}
        {!Array.isArray(data) && (
          <div data-testid="tree-node-root">
            {renderCustomNodeElement
              ? renderCustomNodeElement({
                  nodeDatum: data,
                  toggleNode: () => {},
                  hierarchyPointNode: {} as any,
                })
              : data.name}
          </div>
        )}
      </div>
    </div>
  ),
}));

// Mock window.confirm
const originalConfirm = window.confirm;

// Mock data
const mockFamilyTree: FamilyTree = {
  id: "tree1",
  name: "Test Family Tree",
  description: "A tree for testing",
  ownerId: "user123",
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  members: [
    {
      id: "person1",
      name: "John Doe",
      gender: "male",
      birthDate: "1970-01-01",
      deathDate: null,
      parentIds: [],
      childIds: ["person3"],
      spouseIds: ["person2"],
      imageUrl: null,
      bio: "Father",
    },
    {
      id: "person2",
      name: "Jane Doe",
      gender: "female",
      birthDate: "1975-01-01",
      deathDate: null,
      parentIds: [],
      childIds: ["person3"],
      spouseIds: ["person1"],
      imageUrl: null,
      bio: "Mother",
    },
    {
      id: "person3",
      name: "Jimmy Doe",
      gender: "male",
      birthDate: "2000-01-01",
      deathDate: null,
      parentIds: ["person1", "person2"],
      childIds: [],
      spouseIds: [],
      imageUrl: null,
      bio: "Child",
    },
  ],
  relationships: [
    {
      id: "rel1",
      person1Id: "person1",
      person2Id: "person2",
      relationshipType: "SPOUSE",
      startDate: "1995-01-01",
      endDate: null,
    },
    {
      id: "rel2",
      person1Id: "person1",
      person2Id: "person3",
      relationshipType: "PARENT_CHILD_PARENT_PERSPECTIVE",
      startDate: null,
      endDate: null,
    },
    {
      id: "rel3",
      person1Id: "person2",
      person2Id: "person3",
      relationshipType: "PARENT_CHILD_PARENT_PERSPECTIVE",
      startDate: null,
      endDate: null,
    },
  ],
};

describe("FamilyTreeDisplay Component", () => {
  // Mock lifecycle hooks that would have been handled by MSW
  beforeEach(() => {
    // Reset all mocks before each test
    vi.resetAllMocks();
    
    // Restore the original window.confirm
    window.confirm = vi.fn(() => true);

    // Setup mock implementations
    genealogyService.getFamilyTree.mockResolvedValue(mockFamilyTree);
    genealogyService.addPersonToTree.mockResolvedValue({
      id: "new-person-id",
      name: "New Test Person",
      gender: "female",
      birthDate: "1990-05-15",
      parentIds: [],
      childIds: [],
      spouseIds: [],
      imageUrl: null,
      bio: "New person bio",
    });
    
    genealogyService.updatePersonInTree.mockResolvedValue({
      id: "person1",
      name: "John Doe Updated",
      gender: "male",
      birthDate: "1970-01-01",
      deathDate: null,
      parentIds: [],
      childIds: ["person3"],
      spouseIds: ["person2"],
      imageUrl: null,
      bio: "Updated bio",
    });
    
    genealogyService.addRelationship.mockResolvedValue({
      id: "new-rel-id",
      person1Id: "person1",
      person2Id: "new-person-id",
      relationshipType: "PARENT_CHILD_PARENT_PERSPECTIVE",
      startDate: null,
      endDate: null,
    });
    
    genealogyService.deletePersonFromTree.mockResolvedValue({ success: true });
    genealogyService.deleteRelationship.mockResolvedValue({ success: true });
  });

  afterEach(() => {
    window.confirm = originalConfirm;
  });

  it("displays loading state initially", async () => {
    genealogyService.getFamilyTree.mockImplementation(
      () => new Promise((resolve) => setTimeout(() => resolve(mockFamilyTree), 100))
    );

    render(<FamilyTreeDisplay />);
    
    // Check if loading indicator is displayed
    expect(screen.getByText(/loading/i)).toBeInTheDocument();
    
    // Wait for tree to load
    await waitFor(() => {
      expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();
    });
    
    // Verify that API was called
    expect(genealogyService.getFamilyTree).toHaveBeenCalledWith("tree1");
  });

  it("fetches and displays family tree data successfully", async () => {
    render(<FamilyTreeDisplay />);
    
    // Wait for tree to load
    await waitFor(() => {
      expect(screen.queryByText(/loading/i)).not.toBeInTheDocument();
    });
    
    // Check if tree component is rendered
    expect(screen.getByTestId("mock-tree")).toBeInTheDocument();
    
    // Check if at least one family member is displayed
    expect(screen.getByText(/John Doe/i)).toBeInTheDocument();
    
    // Verify that API was called
    expect(genealogyService.getFamilyTree).toHaveBeenCalledWith("tree1");
  });

  it("displays error message when API call fails", async () => {
    const errorMessage = "Failed to fetch family tree";
    
    // Override the mock to reject
    genealogyService.getFamilyTree.mockRejectedValue(new Error(errorMessage));
    
    render(<FamilyTreeDisplay />);
    
    // Wait for error to be displayed
    await waitFor(() => {
      expect(screen.getByText(new RegExp(errorMessage, "i"))).toBeInTheDocument();
    });
    
    // Verify that API was called
    expect(genealogyService.getFamilyTree).toHaveBeenCalledWith("tree1");
  });

  // Add the remaining tests...
});
