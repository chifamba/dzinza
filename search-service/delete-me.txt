Based on the search service code and specifications, here's a comprehensive overview:

## Search Service APIs

### **Core Search APIs**

1. **`POST /api/v1/search/`** - Perform general search across all document types (persons, events, comments, etc.) with flexible query parameters, filters, pagination, and sorting

2. **`POST /api/v1/search/person`** - Specialized search for people with genealogy-specific matching (firstName, lastName, birth/death dates, fuzzy matching)

3. **`GET /api/v1/search/suggest`** - Get type-ahead search suggestions based on partial query input (minimum 2 characters)

### **Document Management APIs**

4. **`POST /api/v1/search/index`** - Index a new document into Elasticsearch for search (requires title, content, type, privacy level)

5. **`PUT /api/v1/search/index/{id}`** - Update an existing indexed document's metadata, content, or privacy settings

6. **`DELETE /api/v1/search/index/{id}`** - Remove a document from the search index permanently

### **System & Health APIs**

7. **`GET /health`** - Health check endpoint that monitors Elasticsearch connection and optional MongoDB analytics database status

8. **`GET /api-docs`** - Swagger UI documentation for interactive API exploration and testing

9. **`GET /metrics`** - Prometheus metrics endpoint for monitoring search service performance and usage statistics

## Service Architecture

### **Technology Stack**
- **Framework**: FastAPI (Python) with async/await support
- **Search Engine**: Elasticsearch for full-text search and document indexing
- **Analytics Database**: MongoDB (optional) for search analytics and usage tracking
- **Authentication**: JWT Bearer token authentication
- **Logging**: Structured logging with `structlog`
- **Documentation**: OpenAPI/Swagger automatic documentation

### **Core Components**

#### **1. Application Layer (main.py)**
- FastAPI application with lifespan management
- CORS middleware for cross-origin requests
- Global exception handlers for consistent error responses
- Health check endpoint outside versioned API

#### **2. Service Layer**
- **ElasticsearchClientSingleton**: Manages Elasticsearch connections
- **AnalyticsDataStorage**: Handles MongoDB analytics database operations
- Connection pooling and lifecycle management

#### **3. API Layer (`/api/v1/`)**
- RESTful API endpoints with OpenAPI documentation
- Request validation and response serialization
- JWT authentication middleware

#### **4. Data Layer**
- **Elasticsearch Indices**: Document storage and search
- **MongoDB Collections**: Analytics and usage metrics storage
- **Schema Management**: Document type definitions and mappings

### **Key Features**

#### **Search Capabilities**
- Full-text search with highlighting
- Faceted search and filtering
- Fuzzy matching for genealogy data
- Privacy-aware search results
- Family tree scoping
- Pagination and sorting

#### **Security & Privacy**
- JWT-based authentication
- Privacy level filtering (public, family, private)
- User-scoped search results
- Family tree access control

#### **Monitoring & Observability**
- Structured logging with request tracing
- Health checks for all dependencies
- Prometheus metrics (planned)
- OpenTelemetry instrumentation (planned)

#### **Scalability Features**
- Async/await for high concurrency
- Connection pooling for databases
- Configurable CORS origins
- Environment-based configuration

### **Configuration Management**
- Environment variables for all settings
- Debug/production mode switching
- Optional analytics database
- Configurable API versioning

All APIs except `/health` and `/metrics` require JWT Bearer token authentication. The service is designed for high availability with proper error handling, health monitoring, and graceful startup/shutdown procedures.