# Paths for Storage Service

/files/upload:
  post:
    tags:
      - Files
    summary: Upload one or more files
    operationId: uploadFiles
    requestBody:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              files:
                type: array
                items:
                  type: string
                  format: binary
                description: List of files to upload.
              family_tree_id:
                type: string
                format: uuid # Assuming tree IDs are UUIDs
                nullable: true
                description: Optional ID of the family tree to associate files with.
              category:
                type: string
                default: "other"
                enum: [photo, document, audio, video, other] # Match FileRecord category enum
                nullable: true
                description: Category for the uploaded files.
              privacy:
                type: string
                default: "private"
                enum: [public, private, family] # Match FileRecord privacy enum
                nullable: true
                description: Privacy setting for the files.
              tags:
                type: string
                nullable: true
                description: Comma-separated list of tags.
              description:
                type: string
                nullable: true
                description: Description for the files.
              generate_thumbnails:
                type: boolean
                default: true
                description: Whether to generate thumbnails for image files.
    responses:
      '201':
        description: Files uploaded successfully. Response includes details for each successful upload and counts.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileUploadListResponse'
            examples:
              default:
                summary: Example response for a batch upload with one success and one failure
                value:
                  data:
                    - $ref: '../examples/file_upload_response.yaml#/value' # Reference the single file example
                  total_success: 1
                  total_failed: 1
                  # errors:
                  #   - filename: "large_video.mp4"
                  #     error: "File too large or size unknown"
      '400':
        description: Bad request (e.g., no files, file too large, all files failed).
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
      '401':
        description: Unauthorized.
      '422':
        description: Validation error for form fields.
    security:
      - bearerAuth: []

/files:
  get:
    tags:
      - Files
    summary: List files for the current user
    operationId: listFiles
    parameters:
      - name: family_tree_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: category
        in: query
        required: false
        schema:
          type: string
          enum: [photo, document, audio, video, other]
      - name: tags # Comma-separated
        in: query
        required: false
        schema:
          type: string
      - name: search
        in: query
        required: false
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          default: 1
          minimum: 1
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
          minimum: 1
          maximum: 100
      - name: sort_by
        in: query
        required: false
        schema:
          type: string
          enum: [uploaded_at, original_name, size_bytes]
          default: "uploaded_at"
      - name: sort_order
        in: query
        required: false
        schema:
          type: string
          enum: [asc, desc]
          default: "desc"
    responses:
      '200':
        description: A list of file records.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileListResponse'
      '401':
        description: Unauthorized.
    security:
      - bearerAuth: []

/files/{file_id}:
  get:
    tags:
      - Files
    summary: Get file metadata
    operationId: getFileDetails
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '200':
        description: File metadata.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileRecordRead' # Using FileRecordRead
      '401':
        description: Unauthorized.
      '404':
        description: File not found or access denied.
    security:
      - bearerAuth: []
  put:
    tags:
      - Files
    summary: Update file metadata
    operationId: updateFileMetadata
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/File.yaml#/FileUpdateSchema'
    responses:
      '200':
        description: File metadata updated successfully.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileRecordRead'
      '400':
        description: Bad request (e.g., no update data).
      '401':
        description: Unauthorized.
      '404':
        description: File not found or access denied.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Files
    summary: Soft delete a file
    operationId: deleteFile
    description: Marks a file as deleted. Actual S3 object deletion is handled by a cleanup task.
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      '204':
        description: File soft-deleted successfully or was already soft-deleted.
      '401':
        description: Unauthorized.
      '404':
        description: File not found or access denied.
    security:
      - bearerAuth: []

/files/{file_id}/download:
  get:
    tags:
      - Files
    summary: Get a presigned URL to download a file or thumbnail
    operationId: getFileDownloadLink
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: thumbnail_size_name
        in: query
        required: false
        schema:
          type: string
        description: Specify thumbnail size (e.g., "100x100") to download a thumbnail.
    responses:
      '200':
        description: Presigned URL for download.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileDownloadLinkResponse'
      '401':
        description: Unauthorized.
      '404':
        description: File or specified thumbnail not found, or access denied.
      '500':
        description: Could not generate download link.
    security:
      - bearerAuth: []

# Internal association endpoints (Example)
/files/{file_id}/associate-event:
  put:
    tags:
      - Files
      - Internal
    summary: Associate an event with a file (Internal)
    operationId: associateEventToFile
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/File.yaml#/EventAssociationRequest'
    responses:
      '200':
        description: Event associated successfully.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileRecordRead'
      '404':
        description: File not found.
    security:
      - bearerAuth: [] # Or a specific internal service auth

/files/{file_id}/associate-person:
  put:
    tags:
      - Files
      - Internal
    summary: Associate a person with a file (Internal)
    operationId: associatePersonToFile
    parameters:
      - name: file_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/File.yaml#/PersonAssociationRequest'
    responses:
      '200':
        description: Person associated successfully.
        content:
          application/json:
            schema:
              $ref: '../schemas/File.yaml#/FileRecordRead'
      '404':
        description: File not found.
    security:
      - bearerAuth: [] # Or a specific internal service auth

# Storage Service Health Check
/storage/health: # Path based on how gateway would route to this service's health
  get:
    tags:
      - System
      - Files
    summary: Storage Service Health Check
    operationId: getStorageServiceHealth
    responses:
      '200':
        description: Storage Service is healthy.
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, example: "healthy" }
                service: { type: string, example: "Dzinza Storage Service" }
                mongodb: { type: string, example: "connected" }
                s3: { type: string, example: "connected" }
      '503':
        description: Storage Service is unhealthy.
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/ErrorResponse'
    security: []
