# Paths for Genealogy Service

# Family Trees
/v1/family-trees:
  post:
    tags:
      - Family Trees
    summary: Create a new family tree
    operationId: createFamilyTree
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/FamilyTree.yaml#/FamilyTreeCreate"
          examples:
            default:
              $ref: "../examples/family_tree_create_request.yaml"
    responses:
      "201":
        description: Family tree created successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/FamilyTree.yaml#/FamilyTreeRead"
            examples:
              default:
                $ref: "../examples/family_tree_read_response.yaml"
      "400":
        description: Invalid input.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse" # Common error response
      "401":
        description: Unauthorized.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
    security:
      - bearerAuth: []
  get:
    tags:
      - Family Trees
    summary: List family trees for the current user
    operationId: listFamilyTrees
    parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
          minimum: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
          minimum: 1
          maximum: 200 # Max limit
    responses:
      "200":
        description: A list of family trees.
        content:
          application/json:
            schema:
              $ref: "../schemas/FamilyTree.yaml#/FamilyTreeListResponse"
      "401":
        description: Unauthorized.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
    security:
      - bearerAuth: []

/v1/family-trees/{tree_id}:
  get:
    tags:
      - Family Trees
    summary: Get a specific family tree by ID
    operationId: getFamilyTreeById
    parameters:
      - name: tree_id
        in: path
        required: true
        description: ID of the family tree to retrieve.
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Details of the family tree.
        content:
          application/json:
            schema:
              $ref: "../schemas/FamilyTree.yaml#/FamilyTreeRead"
            examples:
              default:
                $ref: "../examples/family_tree_read_response.yaml"
      "401":
        description: Unauthorized.
      "404":
        description: Family tree not found or access denied.
    security:
      - bearerAuth: []
  put:
    tags:
      - Family Trees
    summary: Update a family tree
    operationId: updateFamilyTree
    parameters:
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/FamilyTree.yaml#/FamilyTreeUpdate"
    responses:
      "200":
        description: Family tree updated successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/FamilyTree.yaml#/FamilyTreeRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Family tree not found or access denied.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Family Trees
    summary: Delete a family tree
    operationId: deleteFamilyTree
    parameters:
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "204":
        description: Family tree deleted successfully.
      "401":
        description: Unauthorized.
      "404":
        description: Family tree not found or access denied.
    security:
      - bearerAuth: []

# Persons
/v1/family-trees/{tree_id}/persons:
  post:
    tags:
      - Persons
    summary: Create a new person within a family tree
    operationId: createPersonInTree
    parameters:
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/GenealogyPerson.yaml#/PersonCreate"
    responses:
      "201":
        description: Person created successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Family tree not found or access denied.
    security:
      - bearerAuth: []
  get:
    tags:
      - Persons
    summary: List persons in a family tree
    operationId: listPersonsInTree
    parameters:
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
    responses:
      "200":
        description: A list of persons in the tree.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonListResponse"
      "401":
        description: Unauthorized.
      "404":
        description: Family tree not found or access denied.
    security:
      - bearerAuth: []

/v1/persons/{person_id}:
  get:
    tags:
      - Persons
    summary: Get a specific person by ID
    operationId: getPersonById
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Details of the person.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonRead"
      "401":
        description: Unauthorized.
      "403":
        description: Forbidden.
      "404":
        description: Person not found.
    security:
      - bearerAuth: []
  put:
    tags:
      - Persons
    summary: Update a person's details
    operationId: updatePerson
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/GenealogyPerson.yaml#/PersonUpdate"
    responses:
      "200":
        description: Person updated successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "403":
        description: Forbidden.
      "404":
        description: Person not found.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Persons
    summary: Delete a person
    operationId: deletePerson
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "204":
        description: Person deleted successfully.
      "401":
        description: Unauthorized.
      "403":
        description: Forbidden.
      "404":
        description: Person not found.
    security:
      - bearerAuth: []

/v1/persons/{person_id}/trees/{tree_id}:
  post:
    tags:
      - Persons
      - Family Trees
    summary: Associate an existing person with a family tree
    operationId: linkPersonToTree
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Person successfully associated with the tree.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonRead"
      "401":
        description: Unauthorized.
      "404":
        description: Person or Tree not found.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Persons
      - Family Trees
    summary: Disassociate a person from a family tree
    operationId: unlinkPersonFromTree
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: tree_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Person successfully disassociated from the tree.
        content:
          application/json:
            schema:
              $ref: "../schemas/GenealogyPerson.yaml#/PersonRead"
      "401":
        description: Unauthorized.
      "404":
        description: Person or Tree not found.
    security:
      - bearerAuth: []

/v1/persons/search:
  get:
    tags:
      - Persons
      - Search
    summary: Search for persons by name
    operationId: searchPersonsByName
    parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
          minLength: 2
      - name: tree_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 20
    responses:
      "200":
        description: List of persons matching the search.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "../schemas/GenealogyPerson.yaml#/PersonSummary"
      "401":
        description: Unauthorized.
      "403":
        description: Forbidden.
    security:
      - bearerAuth: []

# Relationships
/v1/relationships:
  post:
    tags:
      - Relationships
    summary: Create a new relationship
    operationId: createRelationship
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/Relationship.yaml#/RelationshipCreate"
    responses:
      "201":
        description: Relationship created.
        content:
          application/json:
            schema:
              $ref: "../schemas/Relationship.yaml#/RelationshipRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Tree or Persons not found.
    security:
      - bearerAuth: []
  get:
    tags:
      - Relationships
    summary: List relationships
    operationId: listRelationships
    parameters:
      - name: tree_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: person_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
    responses:
      "200":
        description: A list of relationships.
        content:
          application/json:
            schema:
              $ref: "../schemas/Relationship.yaml#/RelationshipListResponse"
      "401":
        description: Unauthorized.
    security:
      - bearerAuth: []

/v1/relationships/{relationship_id}:
  get:
    tags:
      - Relationships
    summary: Get a specific relationship by ID
    operationId: getRelationshipById
    parameters:
      - name: relationship_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Details of the relationship.
        content:
          application/json:
            schema:
              $ref: "../schemas/Relationship.yaml#/RelationshipRead"
      "401":
        description: Unauthorized.
      "404":
        description: Relationship not found.
    security:
      - bearerAuth: []
  put:
    tags:
      - Relationships
    summary: Update a relationship
    operationId: updateRelationship
    parameters:
      - name: relationship_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/Relationship.yaml#/RelationshipUpdate"
    responses:
      "200":
        description: Relationship updated.
        content:
          application/json:
            schema:
              $ref: "../schemas/Relationship.yaml#/RelationshipRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Relationship not found.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Relationships
    summary: Delete a relationship
    operationId: deleteRelationship
    parameters:
      - name: relationship_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "204":
        description: Relationship deleted.
      "401":
        description: Unauthorized.
      "404":
        description: Relationship not found.
    security:
      - bearerAuth: []

# Events (Genealogical)
/v1/events:
  post:
    tags:
      - Events
    summary: Create a new genealogical event
    operationId: createEvent
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/Event.yaml#/EventCreate"
    responses:
      "201":
        description: Event created.
        content:
          application/json:
            schema:
              $ref: "../schemas/Event.yaml#/EventRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
    security:
      - bearerAuth: []
  get:
    tags:
      - Events
    summary: List genealogical events
    operationId: listEvents
    parameters:
      - name: tree_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: person_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: event_type
        in: query
        required: false
        schema:
          $ref: "../schemas/GenealogyCommon.yaml#/EventType"
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
    responses:
      "200":
        description: A list of events.
        content:
          application/json:
            schema:
              $ref: "../schemas/Event.yaml#/EventListResponse"
      "401":
        description: Unauthorized.
    security:
      - bearerAuth: []

/v1/events/{event_id}:
  get:
    tags:
      - Events
    summary: Get a specific event by ID
    operationId: getEventById
    parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Details of the event.
        content:
          application/json:
            schema:
              $ref: "../schemas/Event.yaml#/EventRead"
      "401":
        description: Unauthorized.
      "404":
        description: Event not found.
    security:
      - bearerAuth: []
  put:
    tags:
      - Events
    summary: Update an event
    operationId: updateEvent
    parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/Event.yaml#/EventUpdate"
    responses:
      "200":
        description: Event updated.
        content:
          application/json:
            schema:
              $ref: "../schemas/Event.yaml#/EventRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Event not found.
    security:
      - bearerAuth: []
  delete:
    tags:
      - Events
    summary: Delete an event
    operationId: deleteEvent
    parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "204":
        description: Event deleted.
      "401":
        description: Unauthorized.
      "404":
        description: Event not found.
    security:
      - bearerAuth: []

# Notifications
/v1/notifications:
  get:
    tags:
      - Notifications
    summary: List notifications for the current user
    operationId: listNotifications
    parameters:
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
    responses:
      "200":
        description: List of notifications.
        content:
          application/json:
            schema:
              $ref: "../schemas/Notification.yaml#/NotificationListResponse"
      "401":
        description: Unauthorized.
    security:
      - bearerAuth: []

/v1/notifications/{notification_id}/read:
  put:
    tags:
      - Notifications
    summary: Mark a notification as read
    operationId: markNotificationRead
    parameters:
      - name: notification_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    responses:
      "200":
        description: Notification marked as read.
        content:
          application/json:
            schema:
              $ref: "../schemas/Notification.yaml#/NotificationRead"
      "401":
        description: Unauthorized.
      "404":
        description: Notification not found.
    security:
      - bearerAuth: []

# Merge Suggestions
/v1/merge-suggestions:
  get:
    tags:
      - Merge Suggestions
    summary: List merge suggestions
    operationId: listMergeSuggestions
    parameters:
      - name: tree_id
        in: query
        required: false
        schema:
          type: string
          format: uuid
      - name: status
        in: query
        required: false
        schema:
          $ref: "../schemas/GenealogyCommon.yaml#/MergeSuggestionStatus"
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 50
    responses:
      "200":
        description: List of merge suggestions.
        content:
          application/json:
            schema:
              $ref: "../schemas/MergeSuggestion.yaml#/MergeSuggestionListResponse"
      "401":
        description: Unauthorized.
    security:
      - bearerAuth: []

/v1/merge-suggestions/{suggestion_id}:
  put:
    tags:
      - Merge Suggestions
    summary: Update a merge suggestion status (accept/decline)
    operationId: updateMergeSuggestion
    parameters:
      - name: suggestion_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "../schemas/MergeSuggestion.yaml#/MergeSuggestionUpdate"
    responses:
      "200":
        description: Suggestion updated.
        content:
          application/json:
            schema:
              $ref: "../schemas/MergeSuggestion.yaml#/MergeSuggestionRead"
      "400":
        description: Invalid input.
      "401":
        description: Unauthorized.
      "404":
        description: Suggestion not found.
    security:
      - bearerAuth: []

# Person History
/v1/persons/{person_id}/history:
  get:
    tags:
      - Person History
    summary: Get history for a specific person
    operationId: getPersonHistory
    parameters:
      - name: person_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: skip
        in: query
        required: false
        schema:
          type: integer
          default: 0
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          default: 100
    responses:
      "200":
        description: List of history entries for the person.
        content:
          application/json:
            schema:
              $ref: "../schemas/PersonHistory.yaml#/PersonHistoryListResponse"
      "401":
        description: Unauthorized.
      "404":
        description: Person not found.
    security:
      - bearerAuth: []

# Genealogy Service Health Check
/genealogy/health:
  get:
    tags:
      - System
      - Family Trees # Group with a major entity of the service
    summary: Genealogy Service Health Check
    description: Checks the operational status of the Genealogy Service.
    operationId: getGenealogyServiceHealth
    responses:
      "200":
        description: Genealogy Service is healthy.
        content:
          application/json:
            schema:
              type: object # Actual response from service health
              properties:
                status:
                  type: string
                  example: "healthy"
                service:
                  type: string
                  example: "Genealogy Service"
                version:
                  type: string
                mongodb:
                  type: string
                  example: "connected"
      "503":
        description: Genealogy Service is unhealthy.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
    security: []
