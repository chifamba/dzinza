# Paths for Authentication Service

/auth/register:
  post:
    tags:
      - Authentication
    summary: Register a new user
    description: Creates a new user account. Username is optional and will be auto-generated from email if not provided.
    operationId: registerUser
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "../schemas/Auth.yaml#/RegisterRequest"
        application/json:
          schema:
            $ref: "../schemas/Auth.yaml#/RegisterRequest"
    responses:
      "200":
        description: User registered successfully.
        content:
          application/json:
            schema:
              $ref: "../schemas/Auth.yaml#/RegisterResponse"
      "409":
        description: Conflict - Email already registered or username already taken.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
      "422":
        description: Unprocessable Entity (validation error).
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"

/auth/login:
  post:
    tags:
      - Authentication
    summary: User login
    description: Authenticates a user with email and password. Sets refresh token as HTTP-only cookie and returns access token.
    operationId: loginUser
    requestBody:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: "../schemas/Auth.yaml#/LoginRequest"
        application/json:
          schema:
            $ref: "../schemas/Auth.yaml#/LoginRequest"
          examples:
            default: # Default example for request
              $ref: "../examples/auth_login_request.yaml"
    responses:
      "200":
        description: Login successful. Refresh token set as HTTP-only cookie.
        content:
          application/json:
            schema:
              $ref: "../schemas/Auth.yaml#/LoginResponse"
            examples:
              default: # Default example for successful response
                $ref: "../examples/auth_login_response.yaml"
        headers:
          Set-Cookie:
            schema:
              type: string
              example: refresh_token=...; Max-Age=604800; Path=/; HttpOnly; SameSite=strict
            description: Sets refresh_token as HTTP-only cookie with 7-day expiration.
      "401":
        description: Unauthorized - Invalid credentials.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
      "403":
        description: Forbidden - Account is disabled.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"

/auth/refresh:
  post:
    tags:
      - Authentication
    summary: Refresh access token
    description: Obtains a new access token using the refresh token stored in HTTP-only cookie. Generates new refresh token and replaces the cookie.
    operationId: refreshToken
    responses:
      "200":
        description: Access token refreshed successfully. New refresh token set as HTTP-only cookie.
        content:
          application/json:
            schema:
              $ref: "../schemas/Auth.yaml#/TokenResponse"
        headers:
          Set-Cookie:
            schema:
              type: string
              example: refresh_token=...; Max-Age=604800; Path=/; HttpOnly; SameSite=strict
            description: Sets new refresh_token as HTTP-only cookie with 7-day expiration.
      "401":
        description: Unauthorized - Invalid, expired, or missing refresh token.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"
      "403":
        description: Forbidden - User account disabled.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/ErrorResponse"

/auth/logout:
  post:
    tags:
      - Authentication
    summary: User logout
    description: Logs out the current user by revoking their refresh token and clearing the refresh token cookie.
    operationId: logoutUser
    responses:
      "200":
        description: Logout successful. Refresh token cookie cleared.
        content:
          application/json:
            schema:
              $ref: "../openapi.yaml#/components/schemas/MessageResponse"
        headers:
          Set-Cookie:
            schema:
              type: string
              example: refresh_token=; Max-Age=0; Path=/; HttpOnly; SameSite=strict
            description: Clears refresh_token cookie.

# =============================================================================
# UNIMPLEMENTED ENDPOINTS - PLANNED FOR FUTURE VERSIONS
# =============================================================================
# The following endpoints are documented but not yet implemented in the current
# version of the auth service. They are planned for future releases.

# Email verification endpoints - planned for v1.1
# /auth/request-email-verification:
# /auth/verify-email:

# Password reset endpoints - planned for v1.1
# /auth/request-password-reset:
# /auth/reset-password:

# Password change endpoint - planned for v1.1
# /auth/change-password:

# Multi-factor authentication endpoints - planned for v1.2
# /mfa/enable-mfa-request:
# /mfa/verify-mfa-enable:
# /mfa/disable:
# /mfa/regenerate-backup-codes:
# /mfa/verify-backup-code:

# Social login endpoints - planned for v2.0
# /auth/social/google:
# /auth/social/facebook:
# /auth/social/apple:

# =============================================================================
# IMPLEMENTATION DETAILS FOR CURRENT VERSION
# =============================================================================
# Current implementation notes:
# - Authentication uses form parameters instead of JSON body for compatibility
# - Refresh tokens are stored as HTTP-only cookies for security
# - No MFA implementation in current version
# - Email verification is not implemented
# - Password reset flows are not implemented

# Commented out unimplemented endpoints below:

# /auth/request-email-verification:
# NOTE: Additional endpoints (email verification, password reset, MFA, user management)
# are documented in the original specification but not yet implemented in the current
# version of the auth service. These are planned for future releases:
#
# Planned for v1.1:
# - /auth/request-email-verification
# - /auth/verify-email
# - /auth/request-password-reset
# - /auth/reset-password
# - /auth/change-password
#
# Planned for v1.2:
# - /mfa/enable-mfa-request
# - /mfa/verify-mfa-enable
# - /mfa/disable
# - /mfa/regenerate-backup-codes
# - /mfa/verify-backup-code
#
# Planned for v1.3:
# - /users/me (GET/PUT)
# - /users (admin endpoints)
# - /users/{user_id} (admin endpoints)
#
# The current implementation focuses on basic authentication flows:
# - User registration with email/password
# - User login with email/password
# - Token refresh using HTTP-only cookies
# - User logout with token revocation

# Health check endpoint (implemented)
/health:
  get:
    tags:
      - System
      - Authentication
    summary: Auth Service Health Check
    description: Checks the operational status of the Authentication Service.
    operationId: getAuthServiceHealth
    responses:
      "200":
        description: Auth Service is healthy.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "healthy"
                service:
                  type: string
                  example: "auth-service"
                timestamp:
                  type: string
                  example: "N/A"
                version:
                  type: string
                  example: "1.0.0"
    security: []
