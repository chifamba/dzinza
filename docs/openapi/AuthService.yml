openapi: 3.0.3
info:
  title: FamilyTree Auth Service API
  version: 1.0.0
  description: API for user authentication, registration, and authorization.

servers:
  - url: https://api.familytree.com/auth
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserBase:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        preferred_language:
          type: string
          example: en
        timezone:
          type: string
          example: UTC
      required:
        - email
        - username
        - first_name
        - last_name

    UserCreate:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            password:
              type: string
              format: password
          required:
            - password

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        preferred_language:
          type: string
        timezone:
          type: string
        isActive:
          type: boolean
        isSuperuser:
          type: boolean
        roles:
          type: array
          items:
            type: string
        emailVerified:
          type: boolean
        mfaEnabled:
          type: boolean
        lastLoginAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        preferences:
          type: object
          properties:
            notifications:
              type: object
              properties:
                email:
                  type: boolean
                push:
                  type: boolean
                newsletter:
                  type: boolean
            privacy:
              type: object
              properties:
                profileVisibility:
                  type: string
                allowMessages:
                  type: boolean
                showOnlineStatus:
                  type: boolean
            theme:
              type: string
            timezone:
              type: string

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Seconds until token expires

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        mfaCode:
          type: string
          nullable: true
      required:
        - email
        - password

    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/UserResponse'
        tokens:
          $ref: '#/components/schemas/AuthTokens'
        requireMfa:
          type: boolean

    RegisterRequest:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        username:
          type: string
        preferredLanguage:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
        - username

    MessageResponse:
      type: object
      properties:
        message:
          type: string

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    RefreshTokenResponse:
      type: object
      properties:
        tokens:
          $ref: '#/components/schemas/AuthTokens'

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/UserResponse'
                  tokens:
                    $ref: '#/components/schemas/AuthTokens'

  /users/login:
    post:
      summary: Login user and obtain tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - invalid credentials or MFA required

  /users/{id}:
    get:
      summary: Get user profile by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

    put:
      summary: Update user profile by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBase'
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
        '404':
          description: User not found

  /tokens/refresh:
    post:
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshTokenResponse'
        '401':
          description: Invalid or expired refresh token

  /users/{id}/verify-email:
    post:
      summary: Confirm user's email address
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid verification token

security:
  - BearerAuth: []
