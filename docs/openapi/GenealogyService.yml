openapi: 3.0.3
info:
  title: FamilyTree Genealogy Service API
  version: 1.0.0
  description: API for managing family trees, persons, relationships, events, and merge suggestions.

servers:
  - url: https://api.familytree.com/genealogy
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Gender:
      type: string
      enum: [MALE, FEMALE, OTHER, UNKNOWN]

    PrivacySetting:
      type: string
      enum: [PUBLIC, FAMILY_TREE_ONLY, PRIVATE]

    PersonPrivacySettings:
      type: object
      properties:
        show_profile:
          $ref: '#/components/schemas/PrivacySetting'
        show_birth_date:
          $ref: '#/components/schemas/PrivacySetting'
        show_death_date:
          $ref: '#/components/schemas/PrivacySetting'

    PersonName:
      type: object
      properties:
        given_name:
          type: string
        surname:
          type: string
        prefix:
          type: string
          nullable: true
        suffix:
          type: string
          nullable: true
        nickname:
          type: string
          nullable: true

    Identifier:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        verification_status:
          type: string
          enum: [Unverified, Verified, Rejected]
        notes:
          type: string
          nullable: true

    Fact:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        date_string:
          type: string
          nullable: true
        place:
          type: string
          nullable: true
        description:
          type: string
          nullable: true

    Person:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tree_ids:
          type: array
          items:
            type: string
            format: uuid
        primary_name:
          $ref: '#/components/schemas/PersonName'
        alternate_names:
          type: array
          items:
            $ref: '#/components/schemas/PersonName'
        gender:
          $ref: '#/components/schemas/Gender'
        birth_date_string:
          type: string
          nullable: true
        birth_date_exact:
          type: string
          format: date
          nullable: true
        birth_place:
          type: string
          nullable: true
        is_birth_date_estimated:
          type: boolean
        death_date_string:
          type: string
          nullable: true
        death_date_exact:
          type: string
          format: date
          nullable: true
        death_place:
          type: string
          nullable: true
        is_death_date_estimated:
          type: boolean
        cause_of_death:
          type: string
          nullable: true
        is_living:
          type: boolean
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/Identifier'
        biography:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        profile_image_url:
          type: string
          format: uri
          nullable: true
        profile_image_id:
          type: string
          format: uuid
          nullable: true
        clan:
          type: string
          nullable: true
        tribe:
          type: string
          nullable: true
        traditional_titles:
          type: array
          items:
            type: string
        privacy_settings:
          $ref: '#/components/schemas/PersonPrivacySettings'
        facts:
          type: array
          items:
            $ref: '#/components/schemas/Fact'
        potential_duplicates:
          type: array
          items:
            type: string
            format: uuid
        merged_into_id:
          type: string
          format: uuid
          nullable: true
        merged_from_ids:
          type: array
          items:
            type: string
            format: uuid

    RelationshipEvent:
      type: object
      properties:
        event_type:
          type: string
          example: Marriage
        date_string:
          type: string
          nullable: true
        date_exact:
          type: string
          format: date
          nullable: true
        place:
          type: string
          nullable: true
        description:
          type: string
          nullable: true

    Relationship:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tree_id:
          type: string
          format: uuid
        person1_id:
          type: string
          format: uuid
        person2_id:
          type: string
          format: uuid
        relationship_type:
          type: string
          enum: [SPOUSE, PARENT_CHILD, SIBLING, ADOPTIVE, OTHER]
        parental_role_person1:
          type: string
          nullable: true
        parental_role_person2:
          type: string
          nullable: true
        spousal_status:
          type: string
          enum: [MARRIED, DIVORCED, WIDOWED, UNKNOWN]
        start_date_string:
          type: string
          nullable: true
        start_date_exact:
          type: string
          format: date
          nullable: true
        end_date_string:
          type: string
          nullable: true
        end_date_exact:
          type: string
          format: date
          nullable: true
        place:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        events:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipEvent'

    FamilyTree:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
          nullable: true
        owner_id:
          type: string
          format: uuid
        root_person_id:
          type: string
          format: uuid
        collaborators:
          type: array
          items:
            type: object
            properties:
              user_id:
                type: string
                format: uuid
              role:
                type: string
                enum: [ADMIN, EDITOR, VIEWER]
              added_at:
                type: string
                format: date-time
              accepted_at:
                type: string
                format: date-time
                nullable: true
        privacy:
          $ref: '#/components/schemas/PrivacySetting'
        settings:
          type: object
          properties:
            allow_collaboration:
              type: boolean
            show_living_persons:
              type: boolean
            default_person_privacy:
              $ref: '#/components/schemas/PrivacySetting'
            theme:
              type: string
        statistics:
          type: object
          properties:
            total_persons:
              type: integer
            total_generations:
              type: integer
            completeness_score:
              type: number
              format: float
        last_gedcom_import:
          type: string
          format: date-time
          nullable: true
        last_gedcom_export:
          type: string
          format: date-time
          nullable: true

    MergeSuggestion:
      type: object
      properties:
        id:
          type: string
          format: uuid
        new_person_id:
          type: string
          format: uuid
        existing_person_id:
          type: string
          format: uuid
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
        created_by_user_id:
          type: string
          format: uuid
        created_by_system:
          type: boolean

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        type:
          type: string
          example: merge_suggestion
        message:
          type: string
        data:
          type: object
        read:
          type: boolean

    PersonCreate:
      type: object
      properties:
        tree_ids:
          type: array
          items:
            type: string
            format: uuid
        primary_name:
          $ref: '#/components/schemas/PersonName'
        gender:
          $ref: '#/components/schemas/Gender'
        birth_date_string:
          type: string
          nullable: true
        birth_date_exact:
          type: string
          format: date
          nullable: true
        birth_place:
          type: string
          nullable: true
        is_birth_date_estimated:
          type: boolean
        death_date_string:
          type: string
          nullable: true
        death_date_exact:
          type: string
          format: date
          nullable: true
        death_place:
          type: string
          nullable: true
        is_death_date_estimated:
          type: boolean
        cause_of_death:
          type: string
          nullable: true
        is_living:
          type: boolean
        biography:
          type: string
          nullable: true
        notes:
          type: string
          nullable: true
        profile_image_id:
          type: string
          format: uuid
          nullable: true
        clan:
          type: string
          nullable: true
        tribe:
          type: string
          nullable: true
        traditional_titles:
          type: array
          items:
            type: string
        privacy_settings:
          $ref: '#/components/schemas/PersonPrivacySettings'
        facts:
          type: array
          items:
            $ref: '#/components/schemas/Fact'
        identifiers:
          type: array
          items:
            $ref: '#/components/schemas/Identifier'
      required:
        - tree_ids
        - primary_name
        - gender
        - is_living

paths:

  /familytrees:
    post:
      summary: Create a new family tree
      security:
        - BearerAuth: []
      requestBody:
        description: Family tree creation object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  $ref: '#/components/schemas/PrivacySetting'
                settings:
                  type: object
                  properties:
                    allow_collaboration:
                      type: boolean
                    show_living_persons:
                      type: boolean
                    default_person_privacy:
                      $ref: '#/components/schemas/PrivacySetting'
                    theme:
                      type: string
                root_person_id:
                  type: string
                  format: uuid
              required:
                - name
                - privacy
                - root_person_id
      responses:
        '201':
          description: Family tree created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyTree'

    get:
      summary: Get list of family trees accessible to the user
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of family trees
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/FamilyTree'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total_records:
                    type: integer
                  total_pages:
                    type: integer

  /familytrees/{id}:
    get:
      summary: Get details of a family tree by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Family tree details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyTree'
        '404':
          description: Family tree not found

    put:
      summary: Update family tree details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Family tree update object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                privacy:
                  $ref: '#/components/schemas/PrivacySetting'
                settings:
                  type: object
                  properties:
                    allow_collaboration:
                      type: boolean
                    show_living_persons:
                      type: boolean
                    default_person_privacy:
                      $ref: '#/components/schemas/PrivacySetting'
                    theme:
                      type: string
      responses:
        '200':
          description: Family tree updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyTree'
        '404':
          description: Family tree not found

  /persons:
    post:
      summary: Create a new person in one or more family trees
      security:
        - BearerAuth: []
      requestBody:
        description: Person creation object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreate'
      responses:
        '201':
          description: Person created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'

    get:
      summary: Search persons by criteria
      security:
        - BearerAuth: []
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Name or partial name to search
        - name: tree_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter persons by family tree
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Person'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total_records:
                    type: integer
                  total_pages:
                    type: integer

  /persons/{id}:
    get:
      summary: Get person details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Person details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found

    put:
      summary: Update person details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Person update object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreate'
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Person not found

  /relationships:
    post:
      summary: Create a new relationship between two persons
      security:
        - BearerAuth: []
      requestBody:
        description: Relationship object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tree_id:
                  type: string
                  format: uuid
                person1_id:
                  type: string
                  format: uuid
                person2_id:
                  type: string
                  format: uuid
                relationship_type:
                  type: string
                  enum: [SPOUSE, PARENT_CHILD, SIBLING, ADOPTIVE, OTHER]
                parental_role_person1:
                  type: string
                  nullable: true
                parental_role_person2:
                  type: string
                  nullable: true
                spousal_status:
                  type: string
                  enum: [MARRIED, DIVORCED, WIDOWED, UNKNOWN]
                start_date_string:
                  type: string
                  nullable: true
                start_date_exact:
                  type: string
                  format: date
                  nullable: true
                end_date_string:
                  type: string
                  nullable: true
                end_date_exact:
                  type: string
                  format: date
                  nullable: true
                place:
                  type: string
                  nullable: true
                notes:
                  type: string
                  nullable: true
                events:
                  type: array
                  items:
                    $ref: '#/components/schemas/RelationshipEvent'
              required:
                - tree_id
                - person1_id
                - person2_id
                - relationship_type
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'

  /relationships/{id}:
    get:
      summary: Get relationship details by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Relationship details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Relationship'
        '404':
          description: Relationship not found

  /events:
    post:
      summary: Create an event (e.g., birth, marriage)
      security:
        - BearerAuth: []
      requestBody:
        description: Event creation object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                person_id:
                  type: string
                  format: uuid
                event_type:
                  type: string
                date_string:
                  type: string
                  nullable: true
                date_exact:
                  type: string
                  format: date
                  nullable: true
                place:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
              required:
                - person_id
                - event_type
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  person_id:
                    type: string
                    format: uuid
                  event_type:
                    type: string
                  date_string:
                    type: string
                    nullable: true
                  date_exact:
                    type: string
                    format: date
                    nullable: true
                  place:
                    type: string
                    nullable: true
                  description:
                    type: string
                    nullable: true

  /merge-suggestions:
    get:
      summary: List merge suggestions
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [PENDING, APPROVED, REJECTED]
          description: Filter by status
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of merge suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MergeSuggestion'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total_records:
                    type: integer
                  total_pages:
                    type: integer

    post:
      summary: Create a merge suggestion
      security:
        - BearerAuth: []
      requestBody:
        description: Merge suggestion object
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_person_id:
                  type: string
                  format: uuid
                existing_person_id:
                  type: string
                  format: uuid
                confidence:
                  type: number
                  format: float
                  minimum: 0
                  maximum: 1
              required:
                - new_person_id
                - existing_person_id
      responses:
        '201':
          description: Merge suggestion created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeSuggestion'

  /merge-suggestions/{id}:
    put:
      summary: Approve or reject a merge suggestion
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update status of merge suggestion
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [APPROVED, REJECTED]
              required:
                - status
      responses:
        '200':
          description: Merge suggestion updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeSuggestion'
        '404':
          description: Merge suggestion not found

  /notifications:
    get:
      summary: Get user notifications
      security:
        - BearerAuth: []
      parameters:
        - name: unread_only
          in: query
          schema:
            type: boolean
          description: Filter for unread notifications only
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  page:
                    type: integer
                  limit:
                    type: integer
                  total_records:
                    type: integer
                  total_pages:
                    type: integer

  /notifications/{id}/read:
    post:
      summary: Mark a notification as read
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
        '404':
          description: Notification not found

security:
  - BearerAuth: []
