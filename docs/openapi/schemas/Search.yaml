# Search Service Schemas

SearchFilter:
  type: object
  properties:
    field:
      type: string
      description: The field to filter on (e.g., 'record_type.keyword', 'tree_id', 'tags.keyword').
    value:
      # Can be string, number, boolean, or date. Using object to allow flexibility,
      # or define specific types if known. For simplicity, string is often used and parsed by backend.
      # For this spec, let's allow multiple types.
      oneOf:
        - type: string
        - type: integer
        - type: number
        - type: boolean
        - type: string # For dates, assuming YYYY-MM-DD string format
          format: date
      description: The value to filter by.
    # operator: # Example for future extension
    #   type: string
    #   enum: [equals, contains, greater_than, less_than, range]
    #   default: equals
  required:
    - field
    - value

SearchQuery:
  type: object
  properties:
    query_string:
      type: string
      default: "*"
      description: The main search query string. Use '*' to match all (if backend supports).
    record_types:
      type: array
      items:
        type: string
      nullable: true
      description: Optional list of record types to filter by (e.g., "person", "family_tree", "event").
      example: ["person", "event"]
    filters:
      type: array
      items:
        $ref: '#/SearchFilter'
      nullable: true
      description: List of specific field filters to apply.
    page:
      type: integer
      format: int32
      default: 1
      minimum: 1
      description: Page number for pagination.
    size:
      type: integer
      format: int32
      default: 10
      minimum: 1
      maximum: 100 # Max results per page
      description: Number of results per page.
    sort_by:
      type: string
      nullable: true
      description: Field to sort results by (e.g., '_score', 'created_at', 'name.keyword').
    sort_order:
      type: string
      enum: [asc, desc]
      default: "desc"
      nullable: true
      description: Sort order ('asc' or 'desc').
    request_highlighting:
      type: boolean
      default: false
      description: Whether to request highlighting of search terms in results.
    request_facets:
      type: array
      items:
        type: string
      nullable: true
      description: List of fields for which to retrieve facet counts (e.g., 'record_type.keyword', 'tags.keyword').
      example: ["record_type.keyword", "tags.keyword"]

# Represents the _source field of an Elasticsearch hit. Structure varies by record type.
# This is a generic representation.
SearchHitSource:
  type: object
  properties:
    record_type:
      type: string
      description: Type of the record (e.g., 'person', 'family_tree').
    title: # Example common field
      type: string
      nullable: true
      description: A display title for the search result.
    summary: # Example common field
      type: string
      nullable: true
      description: A brief summary or snippet for the result.
    # Other fields are dynamic based on the record_type
  additionalProperties: true # Allows any other fields from the ES document source
  example:
    record_type: "person"
    title: "Johnathan Doe"
    summary: "Born in 1950, worked as an engineer."
    primary_name: { given_name: "Johnathan", surname: "Doe" }
    birth_date_string: "1950"

SearchHit:
  type: object
  properties:
    id:
      type: string
      description: Unique ID of the search result (from Elasticsearch _id).
    score:
      type: number
      format: float
      nullable: true
      description: Relevance score from Elasticsearch.
    record_type: # Often duplicated from source for convenience at this level
      type: string
      description: Type of the record.
    source:
      $ref: '#/SearchHitSource' # The actual source data of the hit.
    highlighted_fields:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
      nullable: true
      description: Fields with highlighting snippets if highlighting was requested. Key is field name, value is list of snippets.
      example:
        summary: ["Born in <em>1950</em>, worked as an engineer."]
  required:
    - id
    - record_type
    - source

SearchResponse:
  type: object
  properties:
    query:
      $ref: '#/SearchQuery' # Echo back the query for context
    total_hits:
      type: integer
      format: int64 # ES total hits can be large
      description: Total number of matching documents found.
    hits:
      type: array
      items:
        $ref: '#/SearchHit'
      description: List of search results for the current page.
    page:
      type: integer
      format: int32
    size:
      type: integer
      format: int32
    total_pages:
      type: integer
      format: int32
      nullable: true
      description: Calculated total number of pages.
    facets:
      type: object
      additionalProperties: # Key is the facet field name (e.g., "record_type.keyword")
        type: object
        additionalProperties: # Key is the facet value (e.g., "person"), value is the count
          type: integer
          format: int32
      nullable: true
      description: Aggregated facet counts.
      example:
        "record_type.keyword": { "person": 120, "event": 55 }
        "tags.keyword": { "important": 30, "research_needed": 25 }
    took_ms:
      type: integer
      format: int32
      nullable: true
      description: Time Elasticsearch took to process the query in milliseconds.
  required:
    - query
    - total_hits
    - hits
    - page
    - size

# Schemas for Search Suggestions
SuggestionQuery:
  type: object
  properties:
    text:
      type: string
      minLength: 2
      maxLength: 100
      description: Partial text input for suggestions.
    limit:
      type: integer
      format: int32
      default: 5
      minimum: 1
      maximum: 20
      description: Maximum number of suggestions to return.
    # record_types: # Optional: filter suggestions by record types
    #   type: array
    #   items:
    #     type: string
    #   nullable: true
  required:
    - text

SuggestionResponseItem:
  type: object
  properties:
    text:
      type: string
      description: The suggested completion text.
    record_type:
      type: string
      nullable: true
      description: Type of the record suggested (e.g., 'person', 'tag').
    record_id:
      type: string # Could be UUID if all record IDs are UUIDs
      nullable: true
      description: ID of the suggested record, if applicable.
    # score: # Optional: confidence score for the suggestion
    #   type: number
    #   format: float
    #   nullable: true
  required:
    - text

SuggestionResponse:
  type: object
  properties:
    query_text:
      type: string
      description: The original query text for which suggestions were generated.
    suggestions:
      type: array
      items:
        $ref: '#/SuggestionResponseItem'
  required:
    - query_text
    - suggestions
