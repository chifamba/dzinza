# File and Storage Schemas

Thumbnail:
  type: object
  properties:
    size_name:
      type: string
      description: Name of the thumbnail size (e.g., "small", "medium_150x150").
    width:
      type: integer
      nullable: true
    height:
      type: integer
      nullable: true
    s3_key:
      type: string
      description: S3 key for the thumbnail image.
    url:
      type: string
      format: url
      description: URL to access the thumbnail (could be presigned).
  required:
    - size_name
    - s3_key
    - url

FileMetadata: # Embedded in FileRecord, for custom and extracted metadata
  type: object
  properties:
    title:
      type: string
      nullable: true
    description:
      type: string
      nullable: true
    author:
      type: string
      nullable: true
    creation_date: # Date original content was created
      type: string
      format: date-time
      nullable: true
    location_taken: # For photos/videos
      type: string
      nullable: true
    # Image specific (from EXIF or image processing)
    image_width:
      type: integer
      nullable: true
    image_height:
      type: integer
      nullable: true
    camera_make:
      type: string
      nullable: true
    camera_model:
      type: string
      nullable: true
    gps_latitude:
      type: number
      format: float
      nullable: true
    gps_longitude:
      type: number
      format: float
      nullable: true
    # Document specific
    page_count:
      type: integer
      nullable: true
    word_count:
      type: integer
      nullable: true
    # S3 specific (populated by S3Service)
    s3_version_id:
      type: string
      nullable: true
    s3_etag:
      type: string
      nullable: true
  # Allow other arbitrary key-value pairs
  additionalProperties: true
  # Example of allowing additional properties:
  # example:
  #   custom_field: "custom_value"
  #   source_citation: "Book of Records, p. 42"

# Main FileRecord structure (reflects MongoDB document)
FileRecordBase:
  type: object
  properties:
    user_id:
      type: string
      # format: uuid # if user IDs are UUIDs
      description: ID of the user who uploaded/owns the file.
      readOnly: true # Usually set by system based on authenticated user
    family_tree_id:
      type: string
      # format: uuid # if tree IDs are UUIDs
      nullable: true
      description: Optional ID of the family tree this file is associated with.
    original_name:
      type: string
      description: Original filename from upload.
    filename: # Sanitized or generated name used for storage
      type: string
      description: Internal filename, often part of the S3 key.
      readOnly: true
    s3_key:
      type: string
      description: Full S3 object key.
      readOnly: true
    url: # Presigned or public S3 URL
      type: string
      format: url
      description: URL to access the file.
      readOnly: true
    size_bytes:
      type: integer
      format: int64
      description: Size of the file in bytes.
    mime_type:
      type: string
      description: MIME type of the file.
    category:
      type: string
      default: "other"
      enum: [photo, document, audio, video, other]
      description: Category of the file.
    privacy:
      type: string
      default: "private"
      enum: [public, private, family] # 'family' means shared with tree members
      description: Privacy setting for the file.
    description:
      type: string
      nullable: true
      description: User-provided description for the file.
    tags:
      type: array
      items:
        type: string
      default: []
      description: List of tags associated with the file.
    metadata:
      $ref: '#/FileMetadata'
    thumbnails:
      type: array
      items:
        $ref: '#/Thumbnail'
      default: []
    related_persons: # List of Person IDs (from genealogy-service)
      type: array
      items:
        type: string
        # format: uuid
      default: []
    related_events: # List of Event IDs (from genealogy-service)
      type: array
      items:
        type: string
        # format: uuid
      default: []
    is_deleted:
      type: boolean
      default: false
      readOnly: true # Managed by delete endpoint
    deleted_at:
      type: string
      format: date-time
      nullable: true
      readOnly: true
  required:
    - original_name
    - size_bytes
    - mime_type
    # user_id, s3_key, url, filename are system-set

# Schema for the response when a file is successfully uploaded
FileUploadResponse:
  type: object
  properties:
    id:
      type: string
      format: uuid
    original_name:
      type: string
    url:
      type: string
      format: url
    size_bytes:
      type: integer
      format: int64
    mime_type:
      type: string
    category:
      type: string
    uploaded_at:
      type: string
      format: date-time
    thumbnails:
      type: array
      items:
        $ref: '#/Thumbnail'
      nullable: true
  required:
    - id
    - original_name
    - url
    - size_bytes
    - mime_type
    - category
    - uploaded_at

# Schema for the response when multiple files are uploaded
FileUploadListResponse:
  type: object
  properties:
    data:
      type: array
      items:
        $ref: '#/FileUploadResponse'
    total_success:
      type: integer
    total_failed:
      type: integer
    # errors: # Optional: to provide details on per-file failures
    #   type: array
    #   items:
    #     type: object
    #     properties:
    #       filename:
    #         type: string
    #       error:
    #         type: string
  required:
    - data
    - total_success
    - total_failed

# Schema for reading/returning a full FileRecord
FileRecordRead:
  allOf:
    - $ref: './GenealogyCommon.yaml#/DBModelMixinEffect' # id, created_at, updated_at (renaming uploaded_at to created_at if consistent)
                                                         # FileRecord model has `uploaded_at` and `updated_at`.
                                                         # Let's use those directly and not DBModelMixinEffect here.
    - type: object
      properties:
        id:
          type: string
          format: uuid
        uploaded_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    - $ref: '#/FileRecordBase'

# Schema for listing files (paginated)
FileListResponse:
  type: object
  properties:
    data:
      type: array
      items:
        $ref: '#/FileRecordRead' # Returning full FileRecord for list items
    page:
      type: integer
    limit:
      type: integer
    total_records:
      type: integer
    total_pages:
      type: integer
  required:
    - data
    - page
    - limit
    - total_records
    - total_pages

# Schema for updating file metadata
FileUpdateSchema:
  type: object
  properties:
    description:
      type: string
      nullable: true
    tags:
      type: array
      items:
        type: string
      nullable: true
    privacy:
      type: string
      enum: [public, private, family]
      nullable: true
    family_tree_id:
      type: string
      # format: uuid
      nullable: true
      description: Change or set the family tree association.
    related_persons:
      type: array
      items:
        type: string
        # format: uuid
      nullable: true
    related_events:
      type: array
      items:
        type: string
        # format: uuid
      nullable: true
    category: # Allow updating category
      type: string
      enum: [photo, document, audio, video, other]
      nullable: true
    original_name: # Allow renaming original_name, which might affect download filename
      type: string
      nullable: true
    # Add other updatable metadata fields from FileMetadata if needed, e.g. metadata.title
    # This would require the API endpoint and CRUD to handle nested updates to the 'metadata' field.
    # Example:
    # metadata_title:
    #   type: string
    #   nullable: true
    #   description: "Updates the 'title' field within the 'metadata' object."
  minProperties: 1 # Ensure at least one field is provided for update

# Schema for file download link response
FileDownloadLinkResponse:
  type: object
  properties:
    download_url:
      type: string
      format: url
    expires_at:
      type: string
      format: date-time
    filename: # Original filename for content-disposition suggestion
      type: string
  required:
    - download_url
    - expires_at
    - filename

# Schemas for internal file association requests
EventAssociationRequest:
  type: object
  properties:
    event_id:
      type: string
      # format: uuid
  required:
    - event_id

PersonAssociationRequest:
  type: object
  properties:
    person_id:
      type: string
      # format: uuid
  required:
    - person_id
