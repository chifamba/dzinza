openapi: 3.0.3
info:
  title: Dzinza Platform API
  version: "1.0.0" # This can be updated as the API evolves
  description: |
    Comprehensive API for the Dzinza Genealogy Platform.
    This specification covers all services accessible via the API Gateway.
  contact:
    name: Dzinza Support
    email: support@dzinza.com
    url: https://dzinza.com/support # Placeholder
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api/v1 # Local development through API Gateway
    description: Local Development Server
  - url: https://api.dzinza.com/v1 # Placeholder for production
    description: Production Server

tags:
  - name: Authentication
    description: User authentication, registration, MFA, and profile management.
  - name: Users
    description: User profile and administrative user management.
  - name: Family Trees
    description: Operations related to family trees.
  - name: Persons
    description: Operations related to individuals within family trees.
  - name: Relationships
    description: Managing relationships between persons.
  - name: Events
    description: Managing genealogical events.
  - name: Notifications
    description: User notification management.
  - name: Merge Suggestions
    description: Managing merge suggestions for duplicate persons.
  - name: Person History
    description: Viewing history of changes to person records.
  - name: Files
    description: File uploads, downloads, and metadata management.
  - name: Search
    description: Searching platform data and getting suggestions.
  - name: System
    description: System-level operations like health checks for individual services (exposed via gateway).

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Access Token issued by the Authentication Service. Prefix token with 'Bearer '."

  schemas:
    # Generic Error Response
    ErrorResponse:
      type: object
      properties:
        detail:
          type: string
          description: A human-readable description of the error.
        errors: # For validation errors
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              type:
                type: string
      example:
        detail: "Validation Error"
        errors:
          - field: "body -> email"
            message: "value is not a valid email address"
            type: "value_error.email"

    # Message Response
    MessageResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: "Operation successful."

    # Pagination related schemas (if common)
    PaginationLinks:
      type: object
      properties:
        first:
          type: string
          format: uri
          nullable: true
        last:
          type: string
          format: uri
          nullable: true
        next:
          type: string
          format: uri
          nullable: true
        prev:
          type: string
          format: uri
          nullable: true

    PaginatedResponse: # Abstract, to be used with specific item types
      type: object
      properties:
        items:
          type: array
          items: {} # Placeholder, specific type to be referenced
        total:
          type: integer
          description: Total number of items available.
        page:
          type: integer
          description: Current page number.
        size:
          type: integer
          description: Number of items per page.
        pages:
          type: integer
          description: Total number of pages.
        links:
          $ref: '#/components/schemas/PaginationLinks'

security:
  - bearerAuth: [] # Apply JWT Bearer auth globally by default. Public paths will override this with `security: []`.

paths:
  # Health check for the API Gateway itself (if it has one, distinct from service health checks)
  # The main.py for backend-service has /api/v1/gateway/health
  /gateway/health:
    get:
      tags:
        - System
      summary: API Gateway Health Check
      description: Checks the operational status of the API Gateway itself.
      operationId: getGatewayHealth
      responses:
        '200':
          description: API Gateway is healthy.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service_name:
                    type: string
                    example: API Gateway (Backend Service)
                  version:
                    type: string
                    example: "0.1.0"
        '503':
          description: API Gateway is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # Paths for services will be added below.

  # --- Authentication Service Endpoints ---
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account and returns authentication tokens for immediate login.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/User.yaml#/RegisterRequest'
      responses:
        '201':
          description: User registered successfully. Returns user details and tokens.
          content:
            application/json:
              schema:
                $ref: './schemas/Auth.yaml#/LoginResponse' # Uses LoginResponse structure
        '400':
          description: Validation error (e.g., email already registered, password complexity not met).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (validation error from Pydantic).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user with email and password. Handles MFA if enabled. Returns user details and tokens.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Auth.yaml#/LoginRequest'
      responses:
        '200':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: './schemas/Auth.yaml#/LoginResponse'
          headers:
            Set-Cookie: # Documenting cookies if set by this endpoint
              schema:
                type: string
                example: access_token_cookie=...; Max-Age=...; Path=/; HttpOnly; SameSite=Lax
              description: Sets access_token_cookie and refresh_token_cookie (HttpOnly).
        '400':
          description: Bad request (e.g., user account inactive).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (e.g., incorrect credentials, invalid MFA code).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (e.g., account locked).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (validation error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Obtains a new access token using a valid refresh token.
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Token.yaml#/RefreshTokenRequest'
      responses:
        '200':
          description: Access token refreshed successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/Token.yaml#/AuthTokens'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access_token_cookie=...; Max-Age=...; Path=/; HttpOnly; SameSite=Lax
              description: Sets a new access_token_cookie (HttpOnly).
        '401':
          description: Unauthorized (e.g., invalid or expired refresh token, user inactive).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Logs out the current user by invalidating their refresh token (if provided) and clearing token cookies.
      operationId: logoutUser
      requestBody: # Optional, client can send refresh token to invalidate it server-side
        content:
          application/json:
            schema:
              $ref: './schemas/Token.yaml#/RefreshTokenRequest'
      responses:
        '200':
          description: Logout successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
          headers:
            Set-Cookie: # Documenting that cookies are cleared
              schema:
                type: string
                example: access_token_cookie=; Max-Age=0; Path=/; HttpOnly; SameSite=Lax
              description: Clears access_token_cookie and refresh_token_cookie.
      security: # Requires active session to logout generally, but can be called to clear cookies too
        - bearerAuth: []

  /auth/request-email-verification:
    post:
      tags:
        - Authentication
      summary: Request email verification
      description: Sends an email verification link to the currently authenticated user if their email is not yet verified.
      operationId: requestEmailVerification
      responses:
        '200':
          description: Verification email sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (e.g., email already verified).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (user not authenticated).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      description: Verifies a user's email address using a token sent via email.
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Auth.yaml#/EmailVerificationConfirmRequest'
      responses:
        '200':
          description: Email verified successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (e.g., invalid or expired token).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: [] # This endpoint is typically public, accessible via link

  /auth/request-password-reset:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Sends a password reset link to the user's email address if the account exists.
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Auth.yaml#/PasswordResetRequest'
      responses:
        '200': # Always returns 200 to prevent email enumeration
          description: If an account with that email exists, a password reset link has been sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
      security: [] # Public endpoint

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Resets the user's password using a token and a new password.
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Auth.yaml#/PasswordResetConfirmRequest'
      responses:
        '200':
          description: Password has been reset successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (e.g., invalid/expired token, password complexity not met).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: [] # Public endpoint

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Allows an authenticated user to change their current password.
      operationId: changePassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Auth.yaml#/PasswordChangeRequest'
      responses:
        '200':
          description: Password changed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (e.g., incorrect current password, new password complexity not met).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # --- MFA Endpoints ---
  /mfa/enable-mfa-request: # Path changed based on my interpretation for a better flow
    post:
      tags:
        - Authentication
      summary: Initiate MFA enablement
      description: Generates a TOTP secret and returns it along with an otpauth URI for QR code generation by the client. The secret is stored temporarily pending verification.
      operationId: enableMfaRequest
      responses:
        '200':
          description: MFA enablement initiated. Returns OTP secret and provisioning URI.
          content:
            application/json:
              schema:
                $ref: './schemas/MFA.yaml#/MFAEnableResponse'
        '400':
          description: Bad request (e.g., MFA already enabled).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /mfa/verify-mfa-enable: # Path changed based on my interpretation
    post:
      tags:
        - Authentication
      summary: Verify and finalize MFA enablement
      description: Verifies a TOTP code provided by the user during MFA setup against a pending secret. If successful, marks MFA as enabled and returns backup codes.
      operationId: verifyMfaAndFinalizeEnable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/MFA.yaml#/MFAVerifyRequest' # Expects mfa_code
      responses:
        '200':
          description: MFA enabled successfully. Returns backup codes.
          content:
            application/json:
              schema:
                $ref: './schemas/MFA.yaml#/MFASetupCompleteResponse'
        '400':
          description: Bad request (e.g., invalid MFA code, no pending setup, MFA already enabled).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /mfa/disable:
    post:
      tags:
        - Authentication
      summary: Disable MFA
      description: Disables MFA for the current user. Requires current password OR a valid MFA code (TOTP or backup).
      operationId: disableMfa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/MFA.yaml#/MFADisableRequest'
      responses:
        '200':
          description: MFA disabled successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Bad request (e.g., MFA not enabled).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (e.g., invalid credentials for disabling).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # --- User Profile Endpoints ---
  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Retrieves the profile details of the currently authenticated user.
      operationId: getCurrentUserProfile
      responses:
        '200':
          description: Successful retrieval of user profile.
          content:
            application/json:
              schema:
                $ref: './schemas/User.yaml#/UserResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
      summary: Update current user profile
      description: Updates the profile details of the currently authenticated user. Users cannot change their role or active status via this endpoint.
      operationId: updateCurrentUserProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/User.yaml#/UserUpdate'
      responses:
        '200':
          description: User profile updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/User.yaml#/UserResponse'
        '400':
          description: Bad request (e.g., validation error, email/username already taken).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (e.g., trying to change own role).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (validation error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # --- Admin User Management Endpoints ---
  /users: # Path for listing users, typically under /users
    get:
      tags:
        - Users
        - Admin
      summary: List users (Admin)
      description: Retrieves a list of all users. Requires administrator privileges.
      operationId: listUsersAdmin
      parameters:
        - name: skip
          in: query
          description: Number of records to skip for pagination.
          required: false
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
        - name: limit
          in: query
          description: Maximum number of records to return.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
            minimum: 1
            maximum: 200
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array # Or a paginated response object
                items:
                  $ref: './schemas/User.yaml#/UserResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (user is not an admin).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: [] # Admin role check done by service

  /users/{user_id}:
    get:
      tags:
        - Users
        - Admin
      summary: Get user by ID (Admin)
      description: Retrieves details for a specific user by their ID. Requires administrator privileges.
      operationId: getUserByIdAdmin
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to retrieve.
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details.
          content:
            application/json:
              schema:
                $ref: './schemas/User.yaml#/UserResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Users
        - Admin
      summary: Update user by ID (Admin)
      description: Updates details for a specific user by their ID. Allows updating role, active status, etc. Requires administrator privileges.
      operationId: updateUserByIdAdmin
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to update.
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/User.yaml#/AdminUserUpdateRequest'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/User.yaml#/UserResponse'
        '400':
          description: Bad request (e.g., validation error, email/username conflict).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity (validation error).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Users
        - Admin
      summary: Delete user by ID (Admin)
      description: Deletes a specific user by their ID. Requires administrator privileges. Consider if this is a soft or hard delete.
      operationId: deleteUserByIdAdmin
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to delete.
          schema:
            type: string
            format: uuid
      responses:
        '200': # Or 204 No Content if that's preferred for DELETE
          description: User deleted successfully (returns deleted user data).
          content:
            application/json:
              schema:
                $ref: './schemas/User.yaml#/UserResponse' # Or MessageResponse
        '204':
          description: User deleted successfully (no content).
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (e.g., admin trying to delete self).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # --- Auth Service Health Check ---
  # Path needs to be unique from gateway health, e.g. /auth/health
  # The auth-service main.py defines /health, which the gateway proxies as /api/v1/auth/health
  /auth/health:
    get:
      tags:
        - System
        - Authentication
      summary: Auth Service Health Check
      description: Checks the operational status of the Authentication Service.
      operationId: getAuthServiceHealth
      responses:
        '200':
          description: Auth Service is healthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse' # Example: {"message": "Auth Service is healthy and running!"}
        '503':
          description: Auth Service is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: [] # Public endpoint

  # --- Genealogy Service Endpoints ---

  # Family Trees
  /family-trees:
    post:
      tags:
        - Family Trees
      summary: Create a new family tree
      operationId: createFamilyTree
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/FamilyTree.yaml#/FamilyTreeCreate'
      responses:
        '201':
          description: Family tree created successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    get:
      tags:
        - Family Trees
      summary: List family trees for the current user
      operationId: listFamilyTrees
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of family trees.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /family-trees/{tree_id}:
    get:
      tags:
        - Family Trees
      summary: Get a specific family tree by ID
      operationId: getFamilyTreeById
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the family tree.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Family Trees
      summary: Update a family tree
      operationId: updateFamilyTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/FamilyTree.yaml#/FamilyTreeUpdate'
      responses:
        '200':
          description: Family tree updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Family Trees
      summary: Delete a family tree
      operationId: deleteFamilyTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Family tree deleted successfully.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # Persons (within a Tree context and general)
  /family-trees/{tree_id}/persons:
    post:
      tags:
        - Persons
      summary: Create a new person within a family tree
      operationId: createPersonInTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/GenealogyPerson.yaml#/PersonCreate'
      responses:
        '201':
          description: Person created successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '404':
          description: Family tree not found or access denied.
      security:
        - bearerAuth: []
    get:
      tags:
        - Persons
      summary: List persons in a family tree
      operationId: listPersonsInTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of persons in the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonListResponse'
        '401':
          description: Unauthorized.
        '404':
          description: Family tree not found or access denied.
      security:
        - bearerAuth: []

  /persons/{person_id}:
    get:
      tags:
        - Persons
      summary: Get a specific person by ID
      operationId: getPersonById
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the person.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (no access to this person).
        '404':
          description: Person not found.
      security:
        - bearerAuth: []
    put:
      tags:
        - Persons
      summary: Update a person's details
      operationId: updatePerson
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/GenealogyPerson.yaml#/PersonUpdate'
      responses:
        '200':
          description: Person updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Person not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Persons
      summary: Delete a person
      operationId: deletePerson
      description: Deletes a person from the system. This is a hard delete and may have cascading effects.
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Person deleted successfully.
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden.
        '404':
          description: Person not found.
      security:
        - bearerAuth: []

  /persons/{person_id}/trees/{tree_id}:
    post: # Link person to tree
      tags:
        - Persons
        - Family Trees
      summary: Associate an existing person with a family tree
      operationId: linkPersonToTree
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Person successfully associated with the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead' # Returns updated person
        '401':
          description: Unauthorized.
        '404':
          description: Person or Tree not found, or access denied to tree.
      security:
        - bearerAuth: []
    delete: # Unlink person from tree
      tags:
        - Persons
        - Family Trees
      summary: Disassociate a person from a family tree
      operationId: unlinkPersonFromTree
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Person successfully disassociated from the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead' # Returns updated person
        '401':
          description: Unauthorized.
        '404':
          description: Person or Tree not found, or access denied to tree.
      security:
        - bearerAuth: []

  /persons/search:
    get:
      tags:
        - Persons
        - Search
      summary: Search for persons by name
      operationId: searchPersonsByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Name query to search for.
        - name: tree_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional tree ID to scope the search.
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of persons matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/GenealogyPerson.yaml#/PersonSummary'
        '401':
          description: Unauthorized.
        '403':
          description: Forbidden (if searching in a tree without access).
      security:
        - bearerAuth: []

  # Relationships (Endpoints based on genealogy-service/app/api/api_v1/endpoints/relationship.py)
  # Assuming a structure like /relationships or /family-trees/{tree_id}/relationships
  # For now, general /relationships, tree context might be in request body or filtered by user access
  /relationships:
    post:
      tags:
        - Relationships
      summary: Create a new relationship
      operationId: createRelationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Relationship.yaml#/RelationshipCreate'
      responses:
        '201':
          description: Relationship created.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '404':
          description: Tree or Persons not found.
      security:
        - bearerAuth: []
    get:
      tags:
        - Relationships
      summary: List relationships
      operationId: listRelationships
      parameters:
        - name: tree_id
          in: query
          required: false # May become required depending on design
          schema:
            type: string
            format: uuid
        - name: person_id # Get relationships for a specific person
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of relationships.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipListResponse'
        '401':
          description: Unauthorized.
      security:
        - bearerAuth: []

  /relationships/{relationship_id}:
    get:
      tags:
        - Relationships
      summary: Get a specific relationship by ID
      operationId: getRelationshipById
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the relationship.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '401':
          description: Unauthorized.
        '404':
          description: Relationship not found.
      security:
        - bearerAuth: []
    put:
      tags:
        - Relationships
      summary: Update a relationship
      operationId: updateRelationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Relationship.yaml#/RelationshipUpdate'
      responses:
        '200':
          description: Relationship updated.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '404':
          description: Relationship not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Relationships
      summary: Delete a relationship
      operationId: deleteRelationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Relationship deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Relationship not found.
      security:
        - bearerAuth: []

  # Events (Genealogical Events)
  # Assuming paths like /events or /family-trees/{tree_id}/events
  /events:
    post:
      tags:
        - Events
      summary: Create a new genealogical event
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Event.yaml#/EventCreate'
      responses:
        '201':
          description: Event created.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
      security:
        - bearerAuth: []
    get:
      tags:
        - Events
      summary: List genealogical events
      operationId: listEvents
      parameters:
        - name: tree_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: person_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: event_type
          in: query
          required: false
          schema:
            $ref: './schemas/GenealogyCommon.yaml#/EventType'
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of events.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventListResponse'
        '401':
          description: Unauthorized.
      security:
        - bearerAuth: []

  /events/{event_id}:
    get:
      tags:
        - Events
      summary: Get a specific event by ID
      operationId: getEventById
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the event.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '401':
          description: Unauthorized.
        '404':
          description: Event not found.
      security:
        - bearerAuth: []
    put:
      tags:
        - Events
      summary: Update an event
      operationId: updateEvent
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Event.yaml#/EventUpdate'
      responses:
        '200':
          description: Event updated.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '404':
          description: Event not found.
      security:
        - bearerAuth: []
    delete:
      tags:
        - Events
      summary: Delete an event
      operationId: deleteEvent
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted.
        '401':
          description: Unauthorized.
        '404':
          description: Event not found.
      security:
        - bearerAuth: []

  # Notifications, Merge Suggestions, Person History - (Simplified for brevity, would follow similar CRUD patterns)
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications for the current user
      operationId: listNotifications
      # Parameters (skip, limit)
      responses:
        '200':
          description: List of notifications.
          content:
            application/json:
              schema:
                $ref: './schemas/Notification.yaml#/NotificationListResponse'
        '401':
          description: Unauthorized.
      security:
        - bearerAuth: []
  /notifications/{notification_id}/read: # Example action
    put:
      tags:
        - Notifications
      summary: Mark a notification as read
      operationId: markNotificationRead
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read.
          content:
            application/json:
              schema:
                $ref: './schemas/Notification.yaml#/NotificationRead'
        '401':
          description: Unauthorized.
        '404':
          description: Notification not found.
      security:
        - bearerAuth: []

  /merge-suggestions:
    get:
      tags:
        - Merge Suggestions
      summary: List merge suggestions
      operationId: listMergeSuggestions
      # Parameters (e.g., tree_id, status, skip, limit)
      responses:
        '200':
          description: List of merge suggestions.
          content:
            application/json:
              schema:
                $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionListResponse'
        '401':
          description: Unauthorized.
      security:
        - bearerAuth: []
  /merge-suggestions/{suggestion_id}:
    put: # To accept or decline
      tags:
        - Merge Suggestions
      summary: Update a merge suggestion status
      operationId: updateMergeSuggestion
      parameters:
        - name: suggestion_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionUpdate' # e.g. {"status": "accepted"}
      responses:
        '200':
          description: Suggestion updated.
          content:
            application/json:
              schema:
                $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionRead'
        '400':
          description: Invalid input.
        '401':
          description: Unauthorized.
        '404':
          description: Suggestion not found.
      security:
        - bearerAuth: []

  /persons/{person_id}/history:
    get:
      tags:
        - Person History
      summary: Get history for a specific person
      operationId: getPersonHistory
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        # Parameters (skip, limit)
      responses:
        '200':
          description: List of history entries for the person.
          content:
            application/json:
              schema:
                $ref: './schemas/PersonHistory.yaml#/PersonHistoryListResponse'
        '401':
          description: Unauthorized.
        '404':
          description: Person not found.
      security:
        - bearerAuth: []

  # --- Genealogy Service Health Check ---
  /genealogy/health: # Assuming gateway routes /api/v1/genealogy/health
    get:
      tags:
        - System
        - Family Trees # Or a more general Genealogy tag
      summary: Genealogy Service Health Check
      description: Checks the operational status of the Genealogy Service.
      operationId: getGenealogyServiceHealth
      responses:
        '200':
          description: Genealogy Service is healthy.
          content:
            application/json:
              schema: # Example, service returns more details
                type: object
                properties:
                  status: { type: string }
                  service: { type: string }
                  mongodb: { type: string }
        '503':
          description: Genealogy Service is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []

  # --- Genealogy Service Endpoints ---

  # Family Trees
  /family-trees:
    post:
      tags:
        - Family Trees
      summary: Create a new family tree
      operationId: createFamilyTree
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/FamilyTree.yaml#/FamilyTreeCreate'
      responses:
        '201':
          description: Family tree created successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    get:
      tags:
        - Family Trees
      summary: List family trees for the current user
      operationId: listFamilyTrees
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of family trees.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /family-trees/{tree_id}:
    get:
      tags:
        - Family Trees
      summary: Get a specific family tree by ID
      operationId: getFamilyTreeById
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the family tree.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Family Trees
      summary: Update a family tree
      operationId: updateFamilyTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/FamilyTree.yaml#/FamilyTreeUpdate'
      responses:
        '200':
          description: Family tree updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/FamilyTree.yaml#/FamilyTreeRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Family Trees
      summary: Delete a family tree
      operationId: deleteFamilyTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Family tree deleted successfully.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # Persons (within a Tree context and general)
  /family-trees/{tree_id}/persons:
    post:
      tags:
        - Persons
      summary: Create a new person within a family tree
      operationId: createPersonInTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/GenealogyPerson.yaml#/PersonCreate'
      responses:
        '201':
          description: Person created successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    get:
      tags:
        - Persons
      summary: List persons in a family tree
      operationId: listPersonsInTree
      parameters:
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of persons in the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Family tree not found or access denied.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /persons/{person_id}:
    get:
      tags:
        - Persons
      summary: Get a specific person by ID
      operationId: getPersonById
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the person.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (no access to this person).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Persons
      summary: Update a person's details
      operationId: updatePerson
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/GenealogyPerson.yaml#/PersonUpdate'
      responses:
        '200':
          description: Person updated successfully.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Persons
      summary: Delete a person
      operationId: deletePerson
      description: Deletes a person from the system. This is a hard delete and may have cascading effects.
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Person deleted successfully.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /persons/{person_id}/trees/{tree_id}:
    post: # Link person to tree
      tags:
        - Persons
        - Family Trees
      summary: Associate an existing person with a family tree
      operationId: linkPersonToTree
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Person successfully associated with the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead' # Returns updated person
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person or Tree not found, or access denied to tree.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete: # Unlink person from tree
      tags:
        - Persons
        - Family Trees
      summary: Disassociate a person from a family tree
      operationId: unlinkPersonFromTree
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tree_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Person successfully disassociated from the tree.
          content:
            application/json:
              schema:
                $ref: './schemas/GenealogyPerson.yaml#/PersonRead' # Returns updated person
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person or Tree not found, or access denied to tree.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /persons/search:
    get:
      tags:
        - Persons
        - Search
      summary: Search for persons by name
      operationId: searchPersonsByName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
            minLength: 2
          description: Name query to search for.
        - name: tree_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
          description: Optional tree ID to scope the search.
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of persons matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/GenealogyPerson.yaml#/PersonSummary'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (if searching in a tree without access).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # Relationships (Endpoints based on genealogy-service/app/api/api_v1/endpoints/relationship.py)
  /relationships:
    post:
      tags:
        - Relationships
      summary: Create a new relationship
      operationId: createRelationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Relationship.yaml#/RelationshipCreate'
      responses:
        '201':
          description: Relationship created.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Tree or Persons not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    get:
      tags:
        - Relationships
      summary: List relationships
      operationId: listRelationships
      parameters:
        - name: tree_id
          in: query
          required: false # May become required depending on design
          schema:
            type: string
            format: uuid
        - name: person_id # Get relationships for a specific person
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of relationships.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /relationships/{relationship_id}:
    get:
      tags:
        - Relationships
      summary: Get a specific relationship by ID
      operationId: getRelationshipById
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the relationship.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Relationship not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Relationships
      summary: Update a relationship
      operationId: updateRelationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Relationship.yaml#/RelationshipUpdate'
      responses:
        '200':
          description: Relationship updated.
          content:
            application/json:
              schema:
                $ref: './schemas/Relationship.yaml#/RelationshipRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Relationship not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Relationships
      summary: Delete a relationship
      operationId: deleteRelationship
      parameters:
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Relationship deleted.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Relationship not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # Events (Genealogical Events)
  /events:
    post:
      tags:
        - Events
      summary: Create a new genealogical event
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Event.yaml#/EventCreate'
      responses:
        '201':
          description: Event created.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    get:
      tags:
        - Events
      summary: List genealogical events
      operationId: listEvents
      parameters:
        - name: tree_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: person_id
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: event_type
          in: query
          required: false
          schema:
            $ref: './schemas/GenealogyCommon.yaml#/EventType'
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: A list of events.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /events/{event_id}:
    get:
      tags:
        - Events
      summary: Get a specific event by ID
      operationId: getEventById
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the event.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    put:
      tags:
        - Events
      summary: Update an event
      operationId: updateEvent
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/Event.yaml#/EventUpdate'
      responses:
        '200':
          description: Event updated.
          content:
            application/json:
              schema:
                $ref: './schemas/Event.yaml#/EventRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Events
      summary: Delete an event
      operationId: deleteEvent
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted.
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # Notifications, Merge Suggestions, Person History
  /notifications:
    get:
      tags:
        - Notifications
      summary: List notifications for the current user
      operationId: listNotifications
      parameters:
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of notifications.
          content:
            application/json:
              schema:
                $ref: './schemas/Notification.yaml#/NotificationListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /notifications/{notification_id}/read:
    put:
      tags:
        - Notifications
      summary: Mark a notification as read
      operationId: markNotificationRead
      parameters:
        - name: notification_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notification marked as read.
          content:
            application/json:
              schema:
                $ref: './schemas/Notification.yaml#/NotificationRead'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Notification not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /merge-suggestions:
    get:
      tags:
        - Merge Suggestions
      summary: List merge suggestions
      operationId: listMergeSuggestions
      parameters:
        - name: tree_id # Optional: filter by tree
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: status # Optional: filter by status
          in: query
          required: false
          schema:
            $ref: './schemas/GenealogyCommon.yaml#/MergeSuggestionStatus'
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
      responses:
        '200':
          description: List of merge suggestions.
          content:
            application/json:
              schema:
                $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /merge-suggestions/{suggestion_id}:
    put: # To accept or decline
      tags:
        - Merge Suggestions
      summary: Update a merge suggestion status
      operationId: updateMergeSuggestion
      parameters:
        - name: suggestion_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionUpdate' # e.g. {"status": "accepted"}
      responses:
        '200':
          description: Suggestion updated.
          content:
            application/json:
              schema:
                $ref: './schemas/MergeSuggestion.yaml#/MergeSuggestionRead'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Suggestion not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  /persons/{person_id}/history:
    get:
      tags:
        - Person History
      summary: Get history for a specific person
      operationId: getPersonHistory
      parameters:
        - name: person_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: skip
          in: query
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: List of history entries for the person.
          content:
            application/json:
              schema:
                $ref: './schemas/PersonHistory.yaml#/PersonHistoryListResponse'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Person not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security:
        - bearerAuth: []

  # --- Genealogy Service Health Check ---
  /genealogy/health:
    get:
      tags:
        - System
        - Family Trees # Or a more general Genealogy tag
      summary: Genealogy Service Health Check
      description: Checks the operational status of the Genealogy Service.
      operationId: getGenealogyServiceHealth
      responses:
        '200':
          description: Genealogy Service is healthy.
          content:
            application/json:
              schema: # Example, service returns more details
                type: object
                properties:
                  status: { type: string }
                  service: { type: string }
                  mongodb: { type: string }
        '503':
          description: Genealogy Service is unhealthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      security: []

  # --- Genealogy Service Endpoints ---
  # $ref: './paths/genealogy_paths.yaml' # This will be the reference once paths are moved

  # For now, adding a few representative paths inline before full refactor
  /family-trees:
    $ref: './paths/genealogy_paths.yaml#/family-trees'
  /family-trees/{tree_id}:
    $ref: './paths/genealogy_paths.yaml#/family-trees/{tree_id}'
  /family-trees/{tree_id}/persons:
    $ref: './paths/genealogy_paths.yaml#/family-trees/{tree_id}/persons'
  /persons/{person_id}:
    $ref: './paths/genealogy_paths.yaml#/persons/{person_id}'
  /persons/{person_id}/trees/{tree_id}:
    $ref: './paths/genealogy_paths.yaml#/persons/{person_id}/trees/{tree_id}'
  /persons/search:
    $ref: './paths/genealogy_paths.yaml#/persons/search'
  /relationships:
    $ref: './paths/genealogy_paths.yaml#/relationships'
  /relationships/{relationship_id}:
    $ref: './paths/genealogy_paths.yaml#/relationships/{relationship_id}'
  /events:
    $ref: './paths/genealogy_paths.yaml#/events'
  /events/{event_id}:
    $ref: './paths/genealogy_paths.yaml#/events/{event_id}'
  /notifications:
    $ref: './paths/genealogy_paths.yaml#/notifications'
  /notifications/{notification_id}/read:
    $ref: './paths/genealogy_paths.yaml#/notifications/{notification_id}/read'
  /merge-suggestions:
    $ref: './paths/genealogy_paths.yaml#/merge-suggestions'
  /merge-suggestions/{suggestion_id}:
    $ref: './paths/genealogy_paths.yaml#/merge-suggestions/{suggestion_id}'
  /persons/{person_id}/history:
    $ref: './paths/genealogy_paths.yaml#/persons/{person_id}/history'
  /genealogy/health:
    $ref: './paths/genealogy_paths.yaml#/genealogy/health'

  # --- Storage Service Endpoints ---
  /files/upload:
    $ref: './paths/storage_paths.yaml#/files/upload'
  /files:
    $ref: './paths/storage_paths.yaml#/files'
  /files/{file_id}:
    $ref: './paths/storage_paths.yaml#/files/{file_id}'
  /files/{file_id}/download:
    $ref: './paths/storage_paths.yaml#/files/{file_id}/download'
  /files/{file_id}/associate-event:
    $ref: './paths/storage_paths.yaml#/files/{file_id}/associate-event'
  /files/{file_id}/associate-person:
    $ref: './paths/storage_paths.yaml#/files/{file_id}/associate-person'
  /storage/health:
    $ref: './paths/storage_paths.yaml#/storage/health'

  # --- Search Service Endpoints ---
  /search:
    $ref: './paths/search_paths.yaml#/search'
  /search/suggest:
    $ref: './paths/search_paths.yaml#/search/suggest'
  /search/health:
    $ref: './paths/search_paths.yaml#/search/health'

  # --- Historical Records Service Endpoints (Planned) ---
  /historical-records:
    $ref: './paths/historical_records_paths.yaml#/historical-records'
  /historical-records/{record_id}:
    $ref: './paths/historical_records_paths.yaml#/historical-records/{record_id}'

  # --- Collaboration Feature Endpoints (Planned) ---
  /family-trees/{tree_id}/collaborators:
    $ref: './paths/collaboration_paths.yaml#/family-trees/{tree_id}/collaborators'
  /family-trees/{tree_id}/collaborators/{user_id}:
    $ref: './paths/collaboration_paths.yaml#/family-trees/{tree_id}/collaborators/{user_id}'

  # ... other paths for other services ...
# End of openapi.yaml
