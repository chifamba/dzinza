openapi: 3.0.3
info:
  title: Dzinza Genealogy Platform API
  version: 1.0.0
  description: |
    This is the OpenAPI (Swagger) specification for the Dzinza Genealogy Platform API.
    It covers authentication, user management, and core genealogy features.
servers:
  - url: http://localhost:3001/api
    description: Local development server

paths:
  # --- Auth Endpoints ---
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication, Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                lastName:
                  type: string
                preferredLanguage:
                  type: string
                  enum: [en, sn, nd]
                  default: en
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Validation error
        "409":
          description: Email already exists
  /register:
    post:
      summary: User registration
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                full_name:
                  type: string
                role:
                  type: string
      responses:
        "201":
          description: Registration successful

  /auth/login:
    post:
      summary: Login a user
      tags: [Authentication, Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials
  /login:
    post:
      summary: User login
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful

  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: Token refreshed
        "401":
          description: Invalid or expired refresh token

  /auth/logout:
    post:
      summary: Logout a user
      tags: [Authentication]
      responses:
        "200":
          description: Logout successful
  /logout:
    post:
      summary: User logout
      tags: [Auth]
      responses:
        "200":
          description: Logout successful

  /session:
    get:
      summary: Get session status
      tags: [Auth]
      responses:
        "200":
          description: Session status
  /session/active_tree:
    put:
      summary: Set the active tree for the session
      tags: [Trees]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tree_id:
                  type: string
      responses:
        "200":
          description: Active tree set
        "400":
          description: Bad request

  /request-password-reset:
    post:
      summary: Request password reset
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_or_username:
                  type: string
      responses:
        "200":
          description: Password reset requested

  /reset-password/{token}:
    post:
      summary: Reset password
      tags: [Auth]
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password:
                  type: string
      responses:
        "200":
          description: Password reset successful

  # --- Trees Endpoints ---
  /trees:
    post:
      summary: Create a new tree
      tags: [Trees]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Tree created
        "400":
          description: Bad request
    get:
      summary: Get all trees for the user
      tags: [Trees]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: sort_order
          schema:
            type: string
      responses:
        "200":
          description: List of trees

  /tree_data:
    get:
      summary: Get tree data for visualization
      tags: [Trees]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: sort_order
          schema:
            type: string
      responses:
        "200":
          description: Tree data

  /trees/{tree_id}/cover_image:
    post:
      summary: Upload a cover image for a tree
      tags: [Trees]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Cover image uploaded
        "400":
          description: Bad request

  /trees/{tree_id}/media:
    get:
      summary: Get media for a tree
      tags: [Trees]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tree media

  /trees/{tree_id}/events:
    get:
      summary: Get events for a tree
      tags: [Trees]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tree events

  /trees/{tree_id}/persons:
    post:
      summary: Add a person to a tree
      tags: [Trees]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Person added
        "200":
          description: Person already associated

  /trees/{tree_id}/persons/{person_id_to_remove}:
    delete:
      summary: Remove a person from a tree
      tags: [Trees]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
        - in: path
          name: person_id_to_remove
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person removed

  # --- People Endpoints ---
  /people:
    get:
      summary: Get all people in a tree
      tags: [People]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: sort_order
          schema:
            type: string
        - in: query
          name: is_living
          schema:
            type: boolean
        - in: query
          name: gender
          schema:
            type: string
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: birth_start_date
          schema:
            type: string
        - in: query
          name: birth_end_date
          schema:
            type: string
        - in: query
          name: death_start_date
          schema:
            type: string
        - in: query
          name: death_end_date
          schema:
            type: string
        - in: query
          name: custom_fields_key
          schema:
            type: string
        - in: query
          name: custom_fields_value
          schema:
            type: string
      responses:
        "200":
          description: List of people
    post:
      summary: Create a new person in a tree
      tags: [People]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Person created

  /people/{person_id}:
    get:
      summary: Get a person by ID
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Person details
    put:
      summary: Update a person by ID
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Person updated
    delete:
      summary: Delete a person by ID
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Person deleted

  /people/order:
    put:
      summary: Update the order of people in a tree
      tags: [People]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
      responses:
        "200":
          description: Order updated

  /people/{person_id}/profile_picture:
    post:
      summary: Upload a profile picture for a person
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile picture uploaded

  /people/{person_id}/media:
    get:
      summary: Get media for a person
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Person media

  /people/{person_id}/events:
    get:
      summary: Get events for a person
      tags: [People]
      parameters:
        - in: path
          name: person_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Person events

  /people/global-people:
    get:
      summary: Get global people not in a specific tree
      tags: [People]
      parameters:
        - in: query
          name: not_in_tree
          required: true
          schema:
            type: string
        - in: query
          name: search_term
          schema:
            type: string
        - in: query
          name: gender
          schema:
            type: string
        - in: query
          name: is_living
          schema:
            type: boolean
      responses:
        "200":
          description: List of global people not in tree

  # --- Relationships Endpoints ---
  /relationships:
    get:
      summary: Get all relationships in a tree
      tags: [Relationships]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: sort_order
          schema:
            type: string
        - in: query
          name: person_id
          schema:
            type: string
        - in: query
          name: relationship_type
          schema:
            type: string
      responses:
        "200":
          description: List of relationships
    post:
      summary: Create a new relationship
      tags: [Relationships]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Relationship created

  /relationships/{relationship_id}:
    get:
      summary: Get a relationship by ID
      tags: [Relationships]
      parameters:
        - in: path
          name: relationship_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Relationship details
    put:
      summary: Update a relationship by ID
      tags: [Relationships]
      parameters:
        - in: path
          name: relationship_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Relationship updated
    delete:
      summary: Delete a relationship by ID
      tags: [Relationships]
      parameters:
        - in: path
          name: relationship_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Relationship deleted

  # --- Media Endpoints ---
  /media/{media_id}:
    get:
      summary: Get a media item by ID
      tags: [Media]
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Media item details
    delete:
      summary: Delete a media item by ID
      tags: [Media]
      parameters:
        - in: path
          name: media_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Media item deleted

  /media:
    post:
      summary: Upload a media item
      tags: [Media]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                linked_entity_type:
                  type: string
                linked_entity_id:
                  type: string
                caption:
                  type: string
                file_type:
                  type: string
      responses:
        "201":
          description: Media item uploaded

  /media/entity/{entity_type}/{entity_id}:
    get:
      summary: Get media for an entity
      tags: [Media]
      parameters:
        - in: path
          name: entity_type
          required: true
          schema:
            type: string
        - in: path
          name: entity_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Media for entity

  # --- Events Endpoints ---
  /events:
    post:
      summary: Create a new event
      tags: [Events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "201":
          description: Event created

  /events/{event_id}:
    get:
      summary: Get an event by ID
      tags: [Events]
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Event details
    put:
      summary: Update an event by ID
      tags: [Events]
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Event updated
    delete:
      summary: Delete an event by ID
      tags: [Events]
      parameters:
        - in: path
          name: event_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted

  # --- Admin Endpoints ---
  /users:
    get:
      summary: Get all users (admin)
      tags: [Admin]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
        - in: query
          name: sort_by
          schema:
            type: string
        - in: query
          name: sort_order
          schema:
            type: string
      responses:
        "200":
          description: List of users

  /users/{user_id}:
    delete:
      summary: Delete a user (admin)
      tags: [Admin]
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted

  /users/{user_id}/role:
    put:
      summary: Set user role (admin)
      tags: [Admin]
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        "200":
          description: User role updated

  # --- Health Endpoints ---
  /health:
    get:
      summary: Health check
      tags: [Health]
      responses:
        "200":
          description: Service is healthy
        "503":
          description: Service unhealthy

  /metrics:
    get:
      summary: Prometheus metrics
      tags: [Health]
      responses:
        "200":
          description: Prometheus metrics

  # --- Tree Layouts Endpoints ---
  /tree_layouts:
    post:
      summary: Save or update a tree layout
      tags: [Tree Layouts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                tree_id:
                  type: string
                layout_data:
                  type: object
      responses:
        "200":
          description: Tree layout saved
        "400":
          description: Bad request

  /tree_layouts/{tree_id}/{user_id}:
    get:
      summary: Get a tree layout
      tags: [Tree Layouts]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Tree layout details
        "404":
          description: Layout not found
    delete:
      summary: Delete a tree layout
      tags: [Tree Layouts]
      parameters:
        - in: path
          name: tree_id
          required: true
          schema:
            type: string
        - in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Tree layout deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
