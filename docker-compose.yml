# Dzinza Genealogy Platform - Docker Compose Configuration
# Complete development and production environment setup

# Define global secrets - in a real setup, these would point to files or be managed by an orchestrator
secrets:
  db_password:
    file: ./secrets/db_password.txt
  mongo_password:
    file: ./secrets/mongo_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  elasticsearch_password:
    file: ./secrets/elasticsearch_password.txt # If used
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  jwt_refresh_secret:
    file: ./secrets/jwt_refresh_secret.txt
  api_key_general: # Renamed to avoid conflict if other API keys are service specific
    file: ./secrets/api_key_general.txt
  aws_access_key_id:
    file: ./secrets/aws_access_key_id.txt
  aws_secret_access_key:
    file: ./secrets/aws_secret_access_key.txt
  smtp_pass:
    file: ./secrets/smtp_pass.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  google_client_id:
    file: ./secrets/google_client_id.txt
  google_client_secret:
    file: ./secrets/google_client_secret.txt
  minio_access_key:
    file: ./secrets/minio_access_key.txt
  minio_secret_key:
    file: ./secrets/minio_secret_key.txt
  # Add other external API key secrets here as needed
  # Example:
  # openai_api_key:
  #   file: ./secrets/openai_api_key.txt
  seed_admin_password:
    file: ./secrets/seed_admin_password.txt

services:
  # Base image for Python services (not a runnable service itself, but context for builds)
  # This entry is more for reference; actual services will use this context.
  # python_base:
  #   build:
  #     context: ./base
  #     dockerfile: Dockerfile
  #   image: dzinza-python-base:latest # Optional: tag the base image

  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: dzinza-frontend
    ports:
      - "8080:8080"
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=production
      - REACT_APP_ENVIRONMENT=production
      - VITE_API_BASE_URL="" # Use relative URLs with nginx proxy
    networks:
      - dzinza-network
    restart: unless-stopped
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dzinza.local`)"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-dzinza_db}
      - POSTGRES_USER=${DB_USER:-dzinza_user}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password # Use secret file
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    secrets: # Grant access to the secret
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-dzinza_user} -d ${DB_NAME:-dzinza_db}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Genealogy Data
  mongodb:
    image: mongo:8.0-noble
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER:-dzinza_user}
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo_password # Use secret file
      - MONGO_INITDB_DATABASE=${MONGODB_GENEALOGY_DB:-dzinza_genealogy}
    secrets: # Grant access to the secret
      - mongo_password
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:8.0.2-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: ["redis-server", "--requirepass", "redis_secure_password_789"]
    secrets: # Grant access to the secret
      - redis_password
    volumes:
      - redis_data:/data
    # Environment variable for REDIS_PASSWORD is no longer needed if accessed via file by the application
    # If the application itself needs REDIS_PASSWORD env var, it should read it from /run/secrets/redis_password
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_secure_password_789", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "bootstrap.memory_lock=true"
      - "cluster.name=dzinza-elasticsearch"
      - "http.cors.enabled=true"
      - 'http.cors.allow-origin="*"'
      - "indices.recovery.max_bytes_per_sec=100mb"
      - "action.destructive_requires_name=false"
      - "logger.level=INFO"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: prometheus
    ports:
      - "${METRICS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    networks:
      - dzinza-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:11.1.0
    container_name: grafana
    ports:
      - "3300:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD_FILE=/run/secrets/grafana_password # Use secret file
    secrets: # Grant access to the secret
      - grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dzinza-network
    restart: unless-stopped

  # Garage S3-compatible Service
  garage1:
    image: dxflrs/garage:v2.0.0
    container_name: dzinza-garage1
    hostname: garage1
    ports:
      - "39000:39000" # S3 API
      - "39011:39011" # RPC
      - "39021:39021" # Web admin
    volumes:
      - ./garage/garage1.toml:/etc/garage.toml
      - garage1_data:/var/lib/garage/data1
      - garage1_meta:/var/lib/garage/meta1
    networks:
      - dzinza-network
    restart: unless-stopped

  garage2:
    image: dxflrs/garage:v2.0.0
    container_name: dzinza-garage2
    hostname: garage2
    ports:
      - "39002:39002" # S3 API
      - "39012:39012" # RPC
      - "39022:39022" # Web admin
    volumes:
      - ./garage/garage2.toml:/etc/garage.toml
      - garage2_data:/var/lib/garage/data2
      - garage2_meta:/var/lib/garage/meta2
    networks:
      - dzinza-network
    restart: unless-stopped

  garage3:
    image: dxflrs/garage:v2.0.0
    container_name: dzinza-garage3
    hostname: garage3
    ports:
      - "39003:39003" # S3 API
      - "39013:39013" # RPC
      - "39023:39023" # Web admin
    volumes:
      - ./garage/garage3.toml:/etc/garage.toml
      - garage3_data:/var/lib/garage/data3
      - garage3_meta:/var/lib/garage/meta3
    networks:
      - dzinza-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: dzinza-api-gateway
    ports:
      - "8000:8000"
    networks:
      - dzinza-network
    restart: unless-stopped
    depends_on:
      - adminmoderationservice
      - analyticsservice
      - audithistoryservice
      - authservice
      - extendedservicesopenapi
      - genealogyservice
      - graphqueryservice
      - localizationservice
      - mediastorageservice
      - searchdiscoveryservice
      - community-marketplace-service
      - deduplication-service
      - notification-service
      - relationship-verification-service
      - trust-access-control-service

  adminmoderationservice:
    build:
      context: ./services/AdminModerationService
      dockerfile: Dockerfile
    container_name: dzinza-adminmoderationservice
    networks:
      - dzinza-network
    restart: unless-stopped

  analyticsservice:
    build:
      context: ./services/AnalyticsService
      dockerfile: Dockerfile
    container_name: dzinza-analyticsservice
    networks:
      - dzinza-network
    restart: unless-stopped

  audithistoryservice:
    build:
      context: ./services/AuditHistoryService
      dockerfile: Dockerfile
    container_name: dzinza-audithistoryservice
    networks:
      - dzinza-network
    restart: unless-stopped

  authservice:
    build:
      context: ./services/AuthService
      dockerfile: Dockerfile
    container_name: dzinza-authservice
    networks:
      - dzinza-network
    restart: unless-stopped

  extendedservicesopenapi:
    build:
      context: ./services/ExtendedServicesOpenapi
      dockerfile: Dockerfile
    container_name: dzinza-extendedservicesopenapi
    networks:
      - dzinza-network
    restart: unless-stopped

  genealogyservice:
    build:
      context: ./services/GenealogyService
      dockerfile: Dockerfile
    container_name: dzinza-genealogyservice
    networks:
      - dzinza-network
    restart: unless-stopped

  graphqueryservice:
    build:
      context: ./services/GraphQueryService
      dockerfile: Dockerfile
    container_name: dzinza-graphqueryservice
    networks:
      - dzinza-network
    restart: unless-stopped

  localizationservice:
    build:
      context: ./services/LocalizationService
      dockerfile: Dockerfile
    container_name: dzinza-localizationservice
    networks:
      - dzinza-network
    restart: unless-stopped

  mediastorageservice:
    build:
      context: ./services/MediaStorageService
      dockerfile: Dockerfile
    container_name: dzinza-mediastorageservice
    networks:
      - dzinza-network
    restart: unless-stopped

  searchdiscoveryservice:
    build:
      context: ./services/SearchDiscoveryService
      dockerfile: Dockerfile
    container_name: dzinza-searchdiscoveryservice
    networks:
      - dzinza-network
    restart: unless-stopped

  community-marketplace-service:
    build:
      context: ./services/community-marketplace-service
      dockerfile: Dockerfile
    container_name: dzinza-community-marketplace-service
    networks:
      - dzinza-network
    restart: unless-stopped

  deduplication-service:
    build:
      context: ./services/deduplication-service
      dockerfile: Dockerfile
    container_name: dzinza-deduplication-service
    networks:
      - dzinza-network
    restart: unless-stopped

  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: dzinza-notification-service
    networks:
      - dzinza-network
    restart: unless-stopped

  relationship-verification-service:
    build:
      context: ./services/relationship-verification-service
      dockerfile: Dockerfile
    container_name: dzinza-relationship-verification-service
    networks:
      - dzinza-network
    restart: unless-stopped

  trust-access-control-service:
    build:
      context: ./services/trust-access-control-service
      dockerfile: Dockerfile
    container_name: dzinza-trust-access-control-service
    networks:
      - dzinza-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  shared_config: # Define the shared_config volume
  garage1_data:
  garage1_meta:
  garage2_data:
  garage2_meta:
  garage3_data:
  garage3_meta:

networks:
  dzinza-network:
    driver: bridge # Default network driver, can be customized if needed
