# Dzinza Genealogy Platform - Docker Compose Configuration
# Complete development and production environment setup

services:
  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dzinza-frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
      - redis
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:3001
      - REACT_APP_ENVIRONMENT=production
    networks:
      - dzinza-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dzinza.local`)"

  # Backend API Gateway
  backend:
    build:
      context: ./backend-service
      dockerfile: Dockerfile
    container_name: dzinza-backend
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - mongodb
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dzinza_user:${DB_PASSWORD}@postgres:5432/dzinza_db
      - MONGODB_URL=mongodb://dzinza_user:${MONGO_PASSWORD}@mongodb:27017/dzinza_genealogy
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      - CORS_ORIGIN=http://localhost:8080
    volumes:
      - ./backend-service/uploads:/app/uploads
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: dzinza-auth-service
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dzinza_user:${DB_PASSWORD}@postgres:5432/dzinza_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - BCRYPT_ROUNDS=12
    networks:
      - dzinza-network
    restart: unless-stopped

  # Genealogy Service
  genealogy-service:
    build:
      context: .
      dockerfile: genealogy-service/Dockerfile
    container_name: dzinza-genealogy-service
    ports:
      - "3004:3004"
    depends_on:
      - mongodb
      - postgres
    environment:
      - NODE_ENV=production
      - MONGODB_URL=mongodb://dzinza_user:${MONGO_PASSWORD}@mongodb:27017/dzinza_genealogy
      - DATABASE_URL=postgresql://dzinza_user:${DB_PASSWORD}@postgres:5432/dzinza_db
    networks:
      - dzinza-network
    restart: unless-stopped

  # Search Service (Elasticsearch-based)
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: dzinza-search-service
    ports:
      - "3003:3003"
    depends_on:
      - elasticsearch
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    networks:
      - dzinza-network
    restart: unless-stopped

  # File Storage Service
  storage-service:
    build:
      context: .
      dockerfile: storage-service/Dockerfile
    container_name: dzinza-storage-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./storage-service/storage:/app/storage
    networks:
      - dzinza-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: dzinza-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=dzinza_db
      - POSTGRES_USER=dzinza_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dzinza_user -d dzinza_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Genealogy Data
  mongodb:
    image: mongo:8.0-noble
    container_name: dzinza-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=dzinza_user
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=dzinza_genealogy
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:8.0.2-alpine
    container_name: dzinza-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search
  elasticsearch:
    image: elasticsearch:9.0.2
    container_name: dzinza-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: dzinza-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    networks:
      - dzinza-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:11.1.0
    container_name: dzinza-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dzinza-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  dzinza-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
