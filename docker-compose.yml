# Dzinza Genealogy Platform - Docker Compose Configuration
# Complete development and production environment setup

services:
  # Frontend - React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dzinza-frontend
    ports:
      - "8080:80"
    depends_on:
      - backend
      - redis
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - VITE_API_URL=http://backend:${BACKEND_PORT:-3001}
      - VITE_API_BASE_URL=http://backend:${BACKEND_PORT:-3001}
      - VITE_AUTH_SERVICE_URL=http://auth-service:${AUTH_SERVICE_PORT:-3002}
      - VITE_GENEALOGY_SERVICE_URL=http://genealogy-service:${GENEALOGY_SERVICE_PORT:-3004}
      - VITE_SEARCH_SERVICE_URL=http://search-service:${SEARCH_SERVICE_PORT:-3003}
      - VITE_STORAGE_SERVICE_URL=http://storage-service:${STORAGE_SERVICE_PORT:-3005}
      - VITE_APP_NAME=${VITE_APP_NAME:-Dzinza}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
      - VITE_JWT_STORAGE_KEY=${VITE_JWT_STORAGE_KEY:-dzinza_access_token}
      - VITE_REFRESH_TOKEN_KEY=${VITE_REFRESH_TOKEN_KEY:-dzinza_refresh_token}
      - VITE_SESSION_TIMEOUT=${VITE_SESSION_TIMEOUT:-3600000}
      - VITE_ENABLE_MFA=${VITE_ENABLE_MFA:-true}
      - VITE_ENABLE_SOCIAL_LOGIN=${VITE_ENABLE_SOCIAL_LOGIN:-false}
      - VITE_ENABLE_EMAIL_VERIFICATION=${VITE_ENABLE_EMAIL_VERIFICATION:-true}
      - VITE_DEFAULT_LANGUAGE=${VITE_DEFAULT_LANGUAGE:-en}
      - VITE_SUPPORTED_LANGUAGES=${VITE_SUPPORTED_LANGUAGES:-en,sn,nd}
      - VITE_DEBUG_MODE=${VITE_DEBUG_MODE:-false}
      - VITE_LOG_LEVEL=${VITE_LOG_LEVEL:-error}
    networks:
      - dzinza-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`dzinza.local`)"

  # Backend API Gateway
  backend:
    build:
      context: ./backend-service
      dockerfile: Dockerfile
    container_name: dzinza-backend
    ports:
      - "${BACKEND_PORT:-3001}:${BACKEND_PORT:-3001}"
    depends_on:
      - postgres
      - redis
      - mongodb
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${BACKEND_PORT:-3001}
      - SERVICE_NAME=backend-service
      - API_BASE_URL=${API_BASE_URL:-http://localhost:3000}
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-dzinza_db}
      - DB_USER=${DB_USER:-dzinza_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_POOL_SIZE=${DB_POOL_SIZE:-20}
      - MONGODB_URI=mongodb://dzinza_user:${MONGO_PASSWORD}@mongodb:27017/dzinza
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB:-0}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS:-12}
      - API_KEY=${API_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      # Service Discovery
      - AUTH_SERVICE_URL=http://auth-service:${AUTH_SERVICE_PORT:-3002}
      - GENEALOGY_SERVICE_URL=http://genealogy-service:${GENEALOGY_SERVICE_PORT:-3004}
      - STORAGE_SERVICE_URL=http://storage-service:${STORAGE_SERVICE_PORT:-3005}
      - SEARCH_SERVICE_URL=http://search-service:${SEARCH_SERVICE_PORT:-3003}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_BUCKET_REGION=${S3_BUCKET_REGION:-us-east-1}
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@dzinza.com}
      - FROM_NAME=${FROM_NAME:-Dzinza Genealogy Platform}
      - SUPPORT_EMAIL=${SUPPORT_EMAIL:-support@dzinza.com}
      # Monitoring & Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_PORT=${METRICS_PORT:-9090}
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-backend-service}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:4318/v1/traces}
      # Rate Limiting
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-1000}
      - AUTH_RATE_LIMIT_WINDOW_MS=${AUTH_RATE_LIMIT_WINDOW_MS:-900000}
      - AUTH_RATE_LIMIT_MAX_REQUESTS=${AUTH_RATE_LIMIT_MAX_REQUESTS:-20}
      # File Upload Configuration
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-52428800}
      - MAX_DOCUMENT_SIZE=${MAX_DOCUMENT_SIZE:-104857600}
      - ALLOWED_IMAGE_TYPES=${ALLOWED_IMAGE_TYPES:-jpg,jpeg,png,gif,webp,tiff,bmp}
      - ALLOWED_DOCUMENT_TYPES=${ALLOWED_DOCUMENT_TYPES:-pdf,doc,docx,txt,rtf}
      # Feature Flags
      - ENABLE_DNA_MATCHING=${ENABLE_DNA_MATCHING:-true}
      - ENABLE_PHOTO_ENHANCEMENT=${ENABLE_PHOTO_ENHANCEMENT:-true}
      - ENABLE_AI_SUGGESTIONS=${ENABLE_AI_SUGGESTIONS:-true}
      - ENABLE_REAL_TIME_COLLABORATION=${ENABLE_REAL_TIME_COLLABORATION:-true}
      - ENABLE_ADVANCED_SEARCH=${ENABLE_ADVANCED_SEARCH:-true}
      - ENABLE_SOCIAL_FEATURES=${ENABLE_SOCIAL_FEATURES:-true}
      - ENABLE_SWAGGER=${ENABLE_SWAGGER:-true}
      - ENABLE_DEBUG_ROUTES=${ENABLE_DEBUG_ROUTES:-false}
      - ENABLE_SEED_DATA=${ENABLE_SEED_DATA:-false}
      # External APIs
      - ANCESTRY_API_KEY=${ANCESTRY_API_KEY}
      - FAMILYSEARCH_API_KEY=${FAMILYSEARCH_API_KEY}
      - GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DNA_API_KEY=${DNA_API_KEY}
      - PHOTO_ENHANCEMENT_API_KEY=${PHOTO_ENHANCEMENT_API_KEY}
      # Localization
      - SUPPORTED_LANGUAGES=${SUPPORTED_LANGUAGES:-en,sn,nd}
      - DEFAULT_LANGUAGE=${DEFAULT_LANGUAGE:-en}
      - DEFAULT_TIMEZONE=${DEFAULT_TIMEZONE:-UTC}
    volumes:
      - ./backend-service/uploads:/app/uploads
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: auth-service/Dockerfile
    container_name: dzinza-auth-service
    ports:
      - "${AUTH_SERVICE_PORT:-3002}:${AUTH_SERVICE_PORT:-3002}"
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${AUTH_SERVICE_PORT:-3002}
      - SERVICE_NAME=auth-service
      - VERSION=${VITE_APP_VERSION:-1.0.0}
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${MONGODB_AUTH_DB:-dzinza_auth}
      - DB_USER=${DB_USER:-dzinza_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - MONGODB_URI=mongodb://dzinza_user:${MONGO_PASSWORD}@mongodb:27017/${MONGODB_AUTH_DB:-dzinza_auth}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB:-0}
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
      - BCRYPT_SALT_ROUNDS=${BCRYPT_SALT_ROUNDS:-12}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
      - AUTH_RATE_LIMIT_MAX=${AUTH_RATE_LIMIT_MAX_REQUESTS:-10}
      # MFA Configuration
      - MFA_ISSUER=${FROM_NAME:-Dzinza Genealogy Platform}
      - MFA_WINDOW=2
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@dzinza.com}
      - FROM_NAME=${FROM_NAME:-Dzinza Genealogy Platform}
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # OpenTelemetry
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - OTEL_SERVICE_NAME=auth-service
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:4318/v1/traces}
    networks:
      - dzinza-network
    restart: unless-stopped

  # Genealogy Service
  genealogy-service:
    build:
      context: .
      dockerfile: genealogy-service/Dockerfile
    container_name: dzinza-genealogy-service
    ports:
      - "${GENEALOGY_SERVICE_PORT:-3004}:${GENEALOGY_SERVICE_PORT:-3004}"
    depends_on:
      - mongodb
      - postgres
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${GENEALOGY_SERVICE_PORT:-3004}
      - SERVICE_NAME=genealogy-service
      - VERSION=${VITE_APP_VERSION:-1.0.0}
      # Database Configuration
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${MONGODB_GENEALOGY_DB:-dzinza_genealogy}
      - DB_USER=${DB_USER:-dzinza_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - MONGODB_URI=mongodb://dzinza_user:${MONGO_PASSWORD}@mongodb:27017/${MONGODB_GENEALOGY_DB:-dzinza_genealogy}
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      # Genealogy-specific Configuration
      - DEFAULT_TREE_PRIVACY=${DEFAULT_TREE_PRIVACY:-private}
      - MAX_TREE_SIZE=${MAX_TREE_SIZE:-10000}
      - MAX_FAMILY_MEMBERS_PER_USER=${MAX_FAMILY_MEMBERS_PER_USER:-5000}
      - DNA_MATCH_THRESHOLD=${DNA_MATCH_THRESHOLD:-7.0}
      - MAX_DNA_MATCHES_DISPLAYED=${MAX_DNA_MATCHES_DISPLAYED:-1000}
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # OpenTelemetry
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - OTEL_SERVICE_NAME=genealogy-service
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:4318/v1/traces}
    networks:
      - dzinza-network
    restart: unless-stopped

  # Search Service (Elasticsearch-based)
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: dzinza-search-service
    ports:
      - "${SEARCH_SERVICE_PORT:-3003}:${SEARCH_SERVICE_PORT:-3003}"
    depends_on:
      - elasticsearch
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${SEARCH_SERVICE_PORT:-3003}
      - SERVICE_NAME=search-service
      - VERSION=${VITE_APP_VERSION:-1.0.0}
      # Database Configuration
      - DB_NAME=${MONGODB_SEARCH_DB:-dzinza_search}
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      # Search-specific Configuration
      - MAX_SEARCH_RESULTS=${MAX_SEARCH_RESULTS:-100}
      - SEARCH_TIMEOUT_MS=${SEARCH_TIMEOUT_MS:-30000}
      - ES_INDEX_PREFIX=${ES_INDEX_PREFIX:-dzinza}
      - ES_MAX_RESULT_WINDOW=${ES_MAX_RESULT_WINDOW:-10000}
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # OpenTelemetry
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - OTEL_SERVICE_NAME=search-service
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:4318/v1/traces}
    networks:
      - dzinza-network
    restart: unless-stopped

  # File Storage Service
  storage-service:
    build:
      context: .
      dockerfile: storage-service/Dockerfile
    container_name: dzinza-storage-service
    ports:
      - "${STORAGE_SERVICE_PORT:-3005}:${STORAGE_SERVICE_PORT:-3005}"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${STORAGE_SERVICE_PORT:-3005}
      - SERVICE_NAME=storage-service
      - VERSION=${VITE_APP_VERSION:-1.0.0}
      # Database Configuration
      - DB_NAME=${MONGODB_STORAGE_DB:-dzinza_storage}
      # Authentication & Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      # AWS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_BUCKET_REGION=${S3_BUCKET_REGION:-us-east-1}
      # Storage-specific Configuration
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-104857600}
      - MAX_IMAGE_SIZE=${MAX_IMAGE_SIZE:-52428800}
      - MAX_DOCUMENT_SIZE=${MAX_DOCUMENT_SIZE:-104857600}
      - ALLOWED_IMAGE_TYPES=${ALLOWED_IMAGE_TYPES:-jpg,jpeg,png,gif,webp,tiff,bmp}
      - ALLOWED_DOCUMENT_TYPES=${ALLOWED_DOCUMENT_TYPES:-pdf,doc,docx,txt,rtf}
      - UPLOAD_RATE_LIMIT_WINDOW_MS=${UPLOAD_RATE_LIMIT_WINDOW_MS:-3600000}
      - UPLOAD_RATE_LIMIT_MAX_REQUESTS=${UPLOAD_RATE_LIMIT_MAX_REQUESTS:-100}
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # OpenTelemetry
      - ENABLE_TRACING=${ENABLE_TRACING:-true}
      - OTEL_SERVICE_NAME=storage-service
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://localhost:4318/v1/traces}
    volumes:
      - ./storage-service/storage:/app/storage
    networks:
      - dzinza-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: dzinza-postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-dzinza_db}
      - POSTGRES_USER=${DB_USER:-dzinza_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-dzinza_user} -d ${DB_NAME:-dzinza_db}",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for Genealogy Data
  mongodb:
    image: mongo:8.0-noble
    container_name: dzinza-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER:-dzinza_user}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_GENEALOGY_DB:-dzinza_genealogy}
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:8.0.2-alpine
    container_name: dzinza-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for Search
  elasticsearch:
    image: elasticsearch:9.0.2
    container_name: dzinza-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dzinza-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v3.4.1
    container_name: dzinza-prometheus
    ports:
      - "${METRICS_PORT:-9090}:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    networks:
      - dzinza-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:11.1.0
    container_name: dzinza-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - dzinza-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  dzinza-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
